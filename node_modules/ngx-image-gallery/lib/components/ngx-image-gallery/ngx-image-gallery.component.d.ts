import { OnInit, ElementRef, Renderer2, EventEmitter, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { GALLERY_CONF, GALLERY_IMAGE } from '../../ngx-image-gallery.conf';
import { DomSanitizer } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export declare class NgxImageGalleryComponent implements OnInit, OnChanges {
    sanitizer: DomSanitizer;
    private galleryElem;
    private renderer;
    private cdRef;
    opened: boolean;
    conf: GALLERY_CONF;
    images: GALLERY_IMAGE[];
    onOpen: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onDelete: EventEmitter<any>;
    onImageChange: EventEmitter<any>;
    onImageClicked: EventEmitter<any>;
    onError: EventEmitter<any>;
    thumbnailsElem: ElementRef;
    /***************************************************/
    loading: boolean;
    activeImageIndex: number;
    thumbnailMargin: string;
    thumbnailsScrollerLeftMargin: string;
    get activeImage(): GALLERY_IMAGE;
    get onFirstImage(): boolean;
    get onLastImage(): boolean;
    get thumbnailsRenderParams(): {
        thumbnailsInView: number;
        newThumbnailMargin: number;
        newThumbnailSize: number;
        thumbnailsScrollerLeftMargin: any;
    };
    private setGalleryConf;
    private loadImage;
    private activateImage;
    private fitThumbnails;
    private scrollThumbnails;
    private debouncedPrev;
    private debouncedNext;
    /***************************************************/
    constructor(sanitizer: DomSanitizer, galleryElem: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onKeyboardInput(event: KeyboardEvent): void;
    onWindowResize(event: Event): void;
    /***************************************************/
    open(index?: number): void;
    close(): void;
    prev(): void;
    next(): void;
    setActiveImage(index: number): void;
    deleteImage(index: number): void;
    mouseWheelUp(): void;
    mouseWheelDown(): void;
    clickOnImage(index: number): void;
    rightClickOnImage(event: Event): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxImageGalleryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxImageGalleryComponent, "ngx-image-gallery", never, { "conf": "conf"; "images": "images"; }, { "onOpen": "onOpen"; "onClose": "onClose"; "onDelete": "onDelete"; "onImageChange": "onImageChange"; "onImageClicked": "onImageClicked"; "onError": "onError"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlLWdhbGxlcnkuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1pbWFnZS1nYWxsZXJ5LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdBTExFUllfQ09ORiwgR0FMTEVSWV9JTUFHRSB9IGZyb20gJy4uLy4uL25neC1pbWFnZS1nYWxsZXJ5LmNvbmYnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hJbWFnZUdhbGxlcnlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBnYWxsZXJ5RWxlbTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgb3BlbmVkOiBib29sZWFuO1xuICAgIGNvbmY6IEdBTExFUllfQ09ORjtcbiAgICBpbWFnZXM6IEdBTExFUllfSU1BR0VbXTtcbiAgICBvbk9wZW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRGVsZXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkltYWdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkltYWdlQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25FcnJvcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdGh1bWJuYWlsc0VsZW06IEVsZW1lbnRSZWY7XG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIGFjdGl2ZUltYWdlSW5kZXg6IG51bWJlcjtcbiAgICB0aHVtYm5haWxNYXJnaW46IHN0cmluZztcbiAgICB0aHVtYm5haWxzU2Nyb2xsZXJMZWZ0TWFyZ2luOiBzdHJpbmc7XG4gICAgZ2V0IGFjdGl2ZUltYWdlKCk6IEdBTExFUllfSU1BR0U7XG4gICAgZ2V0IG9uRmlyc3RJbWFnZSgpOiBib29sZWFuO1xuICAgIGdldCBvbkxhc3RJbWFnZSgpOiBib29sZWFuO1xuICAgIGdldCB0aHVtYm5haWxzUmVuZGVyUGFyYW1zKCk6IHtcbiAgICAgICAgdGh1bWJuYWlsc0luVmlldzogbnVtYmVyO1xuICAgICAgICBuZXdUaHVtYm5haWxNYXJnaW46IG51bWJlcjtcbiAgICAgICAgbmV3VGh1bWJuYWlsU2l6ZTogbnVtYmVyO1xuICAgICAgICB0aHVtYm5haWxzU2Nyb2xsZXJMZWZ0TWFyZ2luOiBhbnk7XG4gICAgfTtcbiAgICBwcml2YXRlIHNldEdhbGxlcnlDb25mO1xuICAgIHByaXZhdGUgbG9hZEltYWdlO1xuICAgIHByaXZhdGUgYWN0aXZhdGVJbWFnZTtcbiAgICBwcml2YXRlIGZpdFRodW1ibmFpbHM7XG4gICAgcHJpdmF0ZSBzY3JvbGxUaHVtYm5haWxzO1xuICAgIHByaXZhdGUgZGVib3VuY2VkUHJldjtcbiAgICBwcml2YXRlIGRlYm91bmNlZE5leHQ7XG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBjb25zdHJ1Y3RvcihzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgZ2FsbGVyeUVsZW06IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBvbktleWJvYXJkSW5wdXQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIG9uV2luZG93UmVzaXplKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBvcGVuKGluZGV4PzogbnVtYmVyKTogdm9pZDtcbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIHByZXYoKTogdm9pZDtcbiAgICBuZXh0KCk6IHZvaWQ7XG4gICAgc2V0QWN0aXZlSW1hZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgZGVsZXRlSW1hZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgbW91c2VXaGVlbFVwKCk6IHZvaWQ7XG4gICAgbW91c2VXaGVlbERvd24oKTogdm9pZDtcbiAgICBjbGlja09uSW1hZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgcmlnaHRDbGlja09uSW1hZ2UoZXZlbnQ6IEV2ZW50KTogYm9vbGVhbjtcbn1cbiJdfQ==