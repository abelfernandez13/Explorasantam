import { AfterViewInit, DoCheck, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { NgxGalleryPreviewComponent } from './ngx-gallery-preview/ngx-gallery-preview.component';
import { NgxGalleryImageComponent } from './ngx-gallery-image/ngx-gallery-image.component';
import { NgxGalleryThumbnailsComponent } from './ngx-gallery-thumbnails/ngx-gallery-thumbnails.component';
import { SafeResourceUrl } from '@angular/platform-browser';
import { NgxGalleryService } from './ngx-gallery.service';
import { NgxGalleryOptions } from './ngx-gallery-options';
import { NgxGalleryImage } from './ngx-gallery-image';
import { NgxGalleryOrderedImage } from './ngx-gallery-ordered-image';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryComponent implements OnInit, DoCheck, AfterViewInit {
    private myElement;
    private helperService;
    options: NgxGalleryOptions[];
    images: NgxGalleryImage[];
    imagesReady: EventEmitter<any>;
    change: EventEmitter<{
        index: number;
        image: NgxGalleryImage;
    }>;
    previewOpen: EventEmitter<any>;
    previewClose: EventEmitter<any>;
    previewChange: EventEmitter<{
        index: number;
        image: NgxGalleryImage;
    }>;
    smallImages: string[] | SafeResourceUrl[];
    mediumImages: NgxGalleryOrderedImage[];
    bigImages: string[] | SafeResourceUrl[];
    descriptions: string[];
    links: string[];
    labels: string[];
    oldImages: NgxGalleryImage[];
    oldImagesLength: number;
    selectedIndex: number;
    previewEnabled: boolean;
    currentOptions: NgxGalleryOptions;
    private breakpoint;
    private prevBreakpoint;
    private fullWidthTimeout;
    preview: NgxGalleryPreviewComponent;
    image: NgxGalleryImageComponent;
    thumbnails: NgxGalleryThumbnailsComponent;
    width: string;
    height: string;
    left: string;
    constructor(myElement: ElementRef, helperService: NgxGalleryService);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    onResize(): void;
    getImageHeight(): string;
    getThumbnailsHeight(): string;
    getThumbnailsMarginTop(): string;
    getThumbnailsMarginBottom(): string;
    openPreview(index: number): void;
    onPreviewOpen(): void;
    onPreviewClose(): void;
    selectFromImage(index: number): void;
    selectFromThumbnails(index: number): void;
    show(index: number): void;
    showNext(): void;
    showPrev(): void;
    canShowNext(): boolean;
    canShowPrev(): boolean;
    previewSelect(index: number): void;
    moveThumbnailsRight(): void;
    moveThumbnailsLeft(): void;
    canMoveThumbnailsRight(): boolean;
    canMoveThumbnailsLeft(): boolean;
    private resetThumbnails;
    private select;
    private checkFullWidth;
    private setImages;
    private setBreakpoint;
    private sortOptions;
    private setOptions;
    private combineOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryComponent, "ngx-gallery", never, { "options": "options"; "images": "images"; }, { "imagesReady": "imagesReady"; "change": "change"; "previewOpen": "previewOpen"; "previewClose": "previewClose"; "previewChange": "previewChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnkuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1nYWxsZXJ5LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hHYWxsZXJ5UHJldmlld0NvbXBvbmVudCB9IGZyb20gJy4vbmd4LWdhbGxlcnktcHJldmlldy9uZ3gtZ2FsbGVyeS1wcmV2aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZ3hHYWxsZXJ5SW1hZ2VDb21wb25lbnQgfSBmcm9tICcuL25neC1nYWxsZXJ5LWltYWdlL25neC1nYWxsZXJ5LWltYWdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZ3hHYWxsZXJ5VGh1bWJuYWlsc0NvbXBvbmVudCB9IGZyb20gJy4vbmd4LWdhbGxlcnktdGh1bWJuYWlscy9uZ3gtZ2FsbGVyeS10aHVtYm5haWxzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTYWZlUmVzb3VyY2VVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE5neEdhbGxlcnlTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS5zZXJ2aWNlJztcbmltcG9ydCB7IE5neEdhbGxlcnlPcHRpb25zIH0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS1vcHRpb25zJztcbmltcG9ydCB7IE5neEdhbGxlcnlJbWFnZSB9IGZyb20gJy4vbmd4LWdhbGxlcnktaW1hZ2UnO1xuaW1wb3J0IHsgTmd4R2FsbGVyeU9yZGVyZWRJbWFnZSB9IGZyb20gJy4vbmd4LWdhbGxlcnktb3JkZXJlZC1pbWFnZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hHYWxsZXJ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIG15RWxlbWVudDtcbiAgICBwcml2YXRlIGhlbHBlclNlcnZpY2U7XG4gICAgb3B0aW9uczogTmd4R2FsbGVyeU9wdGlvbnNbXTtcbiAgICBpbWFnZXM6IE5neEdhbGxlcnlJbWFnZVtdO1xuICAgIGltYWdlc1JlYWR5OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGltYWdlOiBOZ3hHYWxsZXJ5SW1hZ2U7XG4gICAgfT47XG4gICAgcHJldmlld09wZW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByZXZpZXdDbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcHJldmlld0NoYW5nZTogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgaW1hZ2U6IE5neEdhbGxlcnlJbWFnZTtcbiAgICB9PjtcbiAgICBzbWFsbEltYWdlczogc3RyaW5nW10gfCBTYWZlUmVzb3VyY2VVcmxbXTtcbiAgICBtZWRpdW1JbWFnZXM6IE5neEdhbGxlcnlPcmRlcmVkSW1hZ2VbXTtcbiAgICBiaWdJbWFnZXM6IHN0cmluZ1tdIHwgU2FmZVJlc291cmNlVXJsW107XG4gICAgZGVzY3JpcHRpb25zOiBzdHJpbmdbXTtcbiAgICBsaW5rczogc3RyaW5nW107XG4gICAgbGFiZWxzOiBzdHJpbmdbXTtcbiAgICBvbGRJbWFnZXM6IE5neEdhbGxlcnlJbWFnZVtdO1xuICAgIG9sZEltYWdlc0xlbmd0aDogbnVtYmVyO1xuICAgIHNlbGVjdGVkSW5kZXg6IG51bWJlcjtcbiAgICBwcmV2aWV3RW5hYmxlZDogYm9vbGVhbjtcbiAgICBjdXJyZW50T3B0aW9uczogTmd4R2FsbGVyeU9wdGlvbnM7XG4gICAgcHJpdmF0ZSBicmVha3BvaW50O1xuICAgIHByaXZhdGUgcHJldkJyZWFrcG9pbnQ7XG4gICAgcHJpdmF0ZSBmdWxsV2lkdGhUaW1lb3V0O1xuICAgIHByZXZpZXc6IE5neEdhbGxlcnlQcmV2aWV3Q29tcG9uZW50O1xuICAgIGltYWdlOiBOZ3hHYWxsZXJ5SW1hZ2VDb21wb25lbnQ7XG4gICAgdGh1bWJuYWlsczogTmd4R2FsbGVyeVRodW1ibmFpbHNDb21wb25lbnQ7XG4gICAgd2lkdGg6IHN0cmluZztcbiAgICBoZWlnaHQ6IHN0cmluZztcbiAgICBsZWZ0OiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IobXlFbGVtZW50OiBFbGVtZW50UmVmLCBoZWxwZXJTZXJ2aWNlOiBOZ3hHYWxsZXJ5U2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBvblJlc2l6ZSgpOiB2b2lkO1xuICAgIGdldEltYWdlSGVpZ2h0KCk6IHN0cmluZztcbiAgICBnZXRUaHVtYm5haWxzSGVpZ2h0KCk6IHN0cmluZztcbiAgICBnZXRUaHVtYm5haWxzTWFyZ2luVG9wKCk6IHN0cmluZztcbiAgICBnZXRUaHVtYm5haWxzTWFyZ2luQm90dG9tKCk6IHN0cmluZztcbiAgICBvcGVuUHJldmlldyhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBvblByZXZpZXdPcGVuKCk6IHZvaWQ7XG4gICAgb25QcmV2aWV3Q2xvc2UoKTogdm9pZDtcbiAgICBzZWxlY3RGcm9tSW1hZ2UoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2VsZWN0RnJvbVRodW1ibmFpbHMoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2hvdyhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBzaG93TmV4dCgpOiB2b2lkO1xuICAgIHNob3dQcmV2KCk6IHZvaWQ7XG4gICAgY2FuU2hvd05leHQoKTogYm9vbGVhbjtcbiAgICBjYW5TaG93UHJldigpOiBib29sZWFuO1xuICAgIHByZXZpZXdTZWxlY3QoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgbW92ZVRodW1ibmFpbHNSaWdodCgpOiB2b2lkO1xuICAgIG1vdmVUaHVtYm5haWxzTGVmdCgpOiB2b2lkO1xuICAgIGNhbk1vdmVUaHVtYm5haWxzUmlnaHQoKTogYm9vbGVhbjtcbiAgICBjYW5Nb3ZlVGh1bWJuYWlsc0xlZnQoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHJlc2V0VGh1bWJuYWlscztcbiAgICBwcml2YXRlIHNlbGVjdDtcbiAgICBwcml2YXRlIGNoZWNrRnVsbFdpZHRoO1xuICAgIHByaXZhdGUgc2V0SW1hZ2VzO1xuICAgIHByaXZhdGUgc2V0QnJlYWtwb2ludDtcbiAgICBwcml2YXRlIHNvcnRPcHRpb25zO1xuICAgIHByaXZhdGUgc2V0T3B0aW9ucztcbiAgICBwcml2YXRlIGNvbWJpbmVPcHRpb25zO1xufVxuIl19