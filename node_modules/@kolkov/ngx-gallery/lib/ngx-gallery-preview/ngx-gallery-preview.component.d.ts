import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeResourceUrl, SafeStyle, SafeUrl } from '@angular/platform-browser';
import { NgxGalleryService } from '../ngx-gallery.service';
import { NgxGalleryAction } from '../ngx-gallery-action';
import * as ɵngcc0 from '@angular/core';
export declare class NgxGalleryPreviewComponent implements OnInit, OnDestroy, OnChanges {
    private sanitization;
    private elementRef;
    private helperService;
    private renderer;
    private changeDetectorRef;
    src: SafeUrl;
    srcIndex: number;
    description: string;
    type: string;
    showSpinner: boolean;
    positionLeft: number;
    positionTop: number;
    zoomValue: number;
    loading: boolean;
    rotateValue: number;
    index: number;
    images: string[] | SafeResourceUrl[];
    descriptions: string[];
    showDescription: boolean;
    arrows: boolean;
    arrowsAutoHide: boolean;
    swipe: boolean;
    fullscreen: boolean;
    forceFullscreen: boolean;
    closeOnClick: boolean;
    closeOnEsc: boolean;
    keyboardNavigation: boolean;
    arrowPrevIcon: string;
    arrowNextIcon: string;
    closeIcon: string;
    fullscreenIcon: string;
    spinnerIcon: string;
    autoPlay: boolean;
    autoPlayInterval: number;
    autoPlayPauseOnHover: boolean;
    infinityMove: boolean;
    zoom: boolean;
    zoomStep: number;
    zoomMax: number;
    zoomMin: number;
    zoomInIcon: string;
    zoomOutIcon: string;
    animation: boolean;
    actions: NgxGalleryAction[];
    rotate: boolean;
    rotateLeftIcon: string;
    rotateRightIcon: string;
    download: boolean;
    downloadIcon: string;
    bullets: string;
    previewOpen: EventEmitter<any>;
    previewClose: EventEmitter<any>;
    activeChange: EventEmitter<number>;
    previewImage: ElementRef;
    private isOpen;
    private timer;
    private initialX;
    private initialY;
    private initialLeft;
    private initialTop;
    private isMove;
    private keyDownListener;
    constructor(sanitization: DomSanitizer, elementRef: ElementRef, helperService: NgxGalleryService, renderer: Renderer2, changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onKeyDown(e: any): void;
    open(index: number): void;
    close(): void;
    imageMouseEnter(): void;
    imageMouseLeave(): void;
    startAutoPlay(): void;
    stopAutoPlay(): void;
    showAtIndex(index: number): void;
    showNext(): boolean;
    showPrev(): void;
    canShowNext(): boolean;
    canShowPrev(): boolean;
    manageFullscreen(): void;
    getSafeUrl(image: string): SafeUrl;
    getFileType(fileSource: string): string;
    zoomIn(): void;
    zoomOut(): void;
    rotateLeft(): void;
    rotateRight(): void;
    getTransform(): SafeStyle;
    canZoomIn(): boolean;
    canZoomOut(): boolean;
    canDragOnZoom(): boolean;
    mouseDownHandler(e: any): void;
    mouseUpHandler(e: any): void;
    mouseMoveHandler(e: any): void;
    private getClientX;
    private getClientY;
    private resetPosition;
    private isKeyboardNext;
    private isKeyboardPrev;
    private isKeyboardEsc;
    private openFullscreen;
    private closeFullscreen;
    private isFullscreen;
    private show;
    private _show;
    private isLoaded;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGalleryPreviewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGalleryPreviewComponent, "ngx-gallery-preview", never, { "arrows": "arrows"; "images": "images"; "descriptions": "descriptions"; "showDescription": "showDescription"; "arrowsAutoHide": "arrowsAutoHide"; "swipe": "swipe"; "fullscreen": "fullscreen"; "forceFullscreen": "forceFullscreen"; "closeOnClick": "closeOnClick"; "closeOnEsc": "closeOnEsc"; "keyboardNavigation": "keyboardNavigation"; "arrowPrevIcon": "arrowPrevIcon"; "arrowNextIcon": "arrowNextIcon"; "closeIcon": "closeIcon"; "fullscreenIcon": "fullscreenIcon"; "spinnerIcon": "spinnerIcon"; "autoPlay": "autoPlay"; "autoPlayInterval": "autoPlayInterval"; "autoPlayPauseOnHover": "autoPlayPauseOnHover"; "infinityMove": "infinityMove"; "zoom": "zoom"; "zoomStep": "zoomStep"; "zoomMax": "zoomMax"; "zoomMin": "zoomMin"; "zoomInIcon": "zoomInIcon"; "zoomOutIcon": "zoomOutIcon"; "animation": "animation"; "actions": "actions"; "rotate": "rotate"; "rotateLeftIcon": "rotateLeftIcon"; "rotateRightIcon": "rotateRightIcon"; "download": "download"; "downloadIcon": "downloadIcon"; "bullets": "bullets"; }, { "previewOpen": "previewOpen"; "previewClose": "previewClose"; "activeChange": "activeChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktcHJldmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWdhbGxlcnktcHJldmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmwsIFNhZmVTdHlsZSwgU2FmZVVybCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTmd4R2FsbGVyeVNlcnZpY2UgfSBmcm9tICcuLi9uZ3gtZ2FsbGVyeS5zZXJ2aWNlJztcbmltcG9ydCB7IE5neEdhbGxlcnlBY3Rpb24gfSBmcm9tICcuLi9uZ3gtZ2FsbGVyeS1hY3Rpb24nO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4R2FsbGVyeVByZXZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHNhbml0aXphdGlvbjtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBoZWxwZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBzcmM6IFNhZmVVcmw7XG4gICAgc3JjSW5kZXg6IG51bWJlcjtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBzaG93U3Bpbm5lcjogYm9vbGVhbjtcbiAgICBwb3NpdGlvbkxlZnQ6IG51bWJlcjtcbiAgICBwb3NpdGlvblRvcDogbnVtYmVyO1xuICAgIHpvb21WYWx1ZTogbnVtYmVyO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgcm90YXRlVmFsdWU6IG51bWJlcjtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGltYWdlczogc3RyaW5nW10gfCBTYWZlUmVzb3VyY2VVcmxbXTtcbiAgICBkZXNjcmlwdGlvbnM6IHN0cmluZ1tdO1xuICAgIHNob3dEZXNjcmlwdGlvbjogYm9vbGVhbjtcbiAgICBhcnJvd3M6IGJvb2xlYW47XG4gICAgYXJyb3dzQXV0b0hpZGU6IGJvb2xlYW47XG4gICAgc3dpcGU6IGJvb2xlYW47XG4gICAgZnVsbHNjcmVlbjogYm9vbGVhbjtcbiAgICBmb3JjZUZ1bGxzY3JlZW46IGJvb2xlYW47XG4gICAgY2xvc2VPbkNsaWNrOiBib29sZWFuO1xuICAgIGNsb3NlT25Fc2M6IGJvb2xlYW47XG4gICAga2V5Ym9hcmROYXZpZ2F0aW9uOiBib29sZWFuO1xuICAgIGFycm93UHJldkljb246IHN0cmluZztcbiAgICBhcnJvd05leHRJY29uOiBzdHJpbmc7XG4gICAgY2xvc2VJY29uOiBzdHJpbmc7XG4gICAgZnVsbHNjcmVlbkljb246IHN0cmluZztcbiAgICBzcGlubmVySWNvbjogc3RyaW5nO1xuICAgIGF1dG9QbGF5OiBib29sZWFuO1xuICAgIGF1dG9QbGF5SW50ZXJ2YWw6IG51bWJlcjtcbiAgICBhdXRvUGxheVBhdXNlT25Ib3ZlcjogYm9vbGVhbjtcbiAgICBpbmZpbml0eU1vdmU6IGJvb2xlYW47XG4gICAgem9vbTogYm9vbGVhbjtcbiAgICB6b29tU3RlcDogbnVtYmVyO1xuICAgIHpvb21NYXg6IG51bWJlcjtcbiAgICB6b29tTWluOiBudW1iZXI7XG4gICAgem9vbUluSWNvbjogc3RyaW5nO1xuICAgIHpvb21PdXRJY29uOiBzdHJpbmc7XG4gICAgYW5pbWF0aW9uOiBib29sZWFuO1xuICAgIGFjdGlvbnM6IE5neEdhbGxlcnlBY3Rpb25bXTtcbiAgICByb3RhdGU6IGJvb2xlYW47XG4gICAgcm90YXRlTGVmdEljb246IHN0cmluZztcbiAgICByb3RhdGVSaWdodEljb246IHN0cmluZztcbiAgICBkb3dubG9hZDogYm9vbGVhbjtcbiAgICBkb3dubG9hZEljb246IHN0cmluZztcbiAgICBidWxsZXRzOiBzdHJpbmc7XG4gICAgcHJldmlld09wZW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByZXZpZXdDbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWN0aXZlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBwcmV2aWV3SW1hZ2U6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBpc09wZW47XG4gICAgcHJpdmF0ZSB0aW1lcjtcbiAgICBwcml2YXRlIGluaXRpYWxYO1xuICAgIHByaXZhdGUgaW5pdGlhbFk7XG4gICAgcHJpdmF0ZSBpbml0aWFsTGVmdDtcbiAgICBwcml2YXRlIGluaXRpYWxUb3A7XG4gICAgcHJpdmF0ZSBpc01vdmU7XG4gICAgcHJpdmF0ZSBrZXlEb3duTGlzdGVuZXI7XG4gICAgY29uc3RydWN0b3Ioc2FuaXRpemF0aW9uOiBEb21TYW5pdGl6ZXIsIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGhlbHBlclNlcnZpY2U6IE5neEdhbGxlcnlTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBvbk1vdXNlRW50ZXIoKTogdm9pZDtcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZDtcbiAgICBvbktleURvd24oZTogYW55KTogdm9pZDtcbiAgICBvcGVuKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgaW1hZ2VNb3VzZUVudGVyKCk6IHZvaWQ7XG4gICAgaW1hZ2VNb3VzZUxlYXZlKCk6IHZvaWQ7XG4gICAgc3RhcnRBdXRvUGxheSgpOiB2b2lkO1xuICAgIHN0b3BBdXRvUGxheSgpOiB2b2lkO1xuICAgIHNob3dBdEluZGV4KGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHNob3dOZXh0KCk6IGJvb2xlYW47XG4gICAgc2hvd1ByZXYoKTogdm9pZDtcbiAgICBjYW5TaG93TmV4dCgpOiBib29sZWFuO1xuICAgIGNhblNob3dQcmV2KCk6IGJvb2xlYW47XG4gICAgbWFuYWdlRnVsbHNjcmVlbigpOiB2b2lkO1xuICAgIGdldFNhZmVVcmwoaW1hZ2U6IHN0cmluZyk6IFNhZmVVcmw7XG4gICAgZ2V0RmlsZVR5cGUoZmlsZVNvdXJjZTogc3RyaW5nKTogc3RyaW5nO1xuICAgIHpvb21JbigpOiB2b2lkO1xuICAgIHpvb21PdXQoKTogdm9pZDtcbiAgICByb3RhdGVMZWZ0KCk6IHZvaWQ7XG4gICAgcm90YXRlUmlnaHQoKTogdm9pZDtcbiAgICBnZXRUcmFuc2Zvcm0oKTogU2FmZVN0eWxlO1xuICAgIGNhblpvb21JbigpOiBib29sZWFuO1xuICAgIGNhblpvb21PdXQoKTogYm9vbGVhbjtcbiAgICBjYW5EcmFnT25ab29tKCk6IGJvb2xlYW47XG4gICAgbW91c2VEb3duSGFuZGxlcihlOiBhbnkpOiB2b2lkO1xuICAgIG1vdXNlVXBIYW5kbGVyKGU6IGFueSk6IHZvaWQ7XG4gICAgbW91c2VNb3ZlSGFuZGxlcihlOiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0Q2xpZW50WDtcbiAgICBwcml2YXRlIGdldENsaWVudFk7XG4gICAgcHJpdmF0ZSByZXNldFBvc2l0aW9uO1xuICAgIHByaXZhdGUgaXNLZXlib2FyZE5leHQ7XG4gICAgcHJpdmF0ZSBpc0tleWJvYXJkUHJldjtcbiAgICBwcml2YXRlIGlzS2V5Ym9hcmRFc2M7XG4gICAgcHJpdmF0ZSBvcGVuRnVsbHNjcmVlbjtcbiAgICBwcml2YXRlIGNsb3NlRnVsbHNjcmVlbjtcbiAgICBwcml2YXRlIGlzRnVsbHNjcmVlbjtcbiAgICBwcml2YXRlIHNob3c7XG4gICAgcHJpdmF0ZSBfc2hvdztcbiAgICBwcml2YXRlIGlzTG9hZGVkO1xufVxuIl19