import { __decorate } from "tslib";
import { ElementRef, Injectable, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var NgxGalleryService = /** @class */ (function () {
    function NgxGalleryService(renderer) {
        this.renderer = renderer;
        this.swipeHandlers = new Map();
    }
    NgxGalleryService.prototype.manageSwipe = function (status, element, id, nextHandler, prevHandler) {
        var handlers = this.getSwipeHandlers(id);
        // swipeleft and swiperight are available only if hammerjs is included
        try {
            if (status && !handlers) {
                this.swipeHandlers.set(id, [
                    this.renderer.listen(element.nativeElement, 'swipeleft', function () { return nextHandler(); }),
                    this.renderer.listen(element.nativeElement, 'swiperight', function () { return prevHandler(); })
                ]);
            }
            else if (!status && handlers) {
                handlers.map(function (handler) { return handler(); });
                this.removeSwipeHandlers(id);
            }
        }
        catch (e) {
        }
    };
    NgxGalleryService.prototype.validateUrl = function (url) {
        if (url.replace) {
            return url.replace(new RegExp(' ', 'g'), '%20')
                .replace(new RegExp('\'', 'g'), '%27');
        }
        else {
            return url;
        }
    };
    NgxGalleryService.prototype.getBackgroundUrl = function (image) {
        return 'url(\'' + this.validateUrl(image) + '\')';
    };
    NgxGalleryService.prototype.getFileType = function (fileSource) {
        if (fileSource.startsWith('data:')) {
            return fileSource.substr(5, Math.min(fileSource.indexOf(';'), fileSource.indexOf('/')) - 5);
        }
        var fileExtension = fileSource.split('.').pop().toLowerCase();
        if (!fileExtension
            || fileExtension === 'jpeg' || fileExtension === 'jpg'
            || fileExtension === 'png' || fileExtension === 'bmp'
            || fileExtension === 'gif') {
            return 'image';
        }
        else if (fileExtension === 'avi' || fileExtension === 'flv'
            || fileExtension === 'wmv' || fileExtension === 'mov'
            || fileExtension === 'mp4') {
            return 'video';
        }
        return 'unknown';
    };
    NgxGalleryService.prototype.getSwipeHandlers = function (id) {
        return this.swipeHandlers.get(id);
    };
    NgxGalleryService.prototype.removeSwipeHandlers = function (id) {
        this.swipeHandlers.delete(id);
    };
    NgxGalleryService.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    NgxGalleryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxGalleryService_Factory() { return new NgxGalleryService(i0.ɵɵinject(i0.Renderer2)); }, token: NgxGalleryService, providedIn: "root" });
NgxGalleryService.ɵfac = function NgxGalleryService_Factory(t) { return new (t || NgxGalleryService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxGalleryService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, null); })();
    return NgxGalleryService;
}());
export { NgxGalleryService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L0Brb2xrb3Yvbmd4LWdhbGxlcnkvbGliL25neC1nYWxsZXJ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRTs7QUFJQTtBQUNvQixJQUVsQiwyQkFBb0IsUUFBbUI7QUFDekMsUUFEc0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBRmhDLGtCQUFhLEdBQWdDLElBQUksR0FBRyxFQUEwQixDQUFDO0FBQ3pGLElBRUUsQ0FBQztBQUNILElBQ0UsdUNBQVcsR0FBWCxVQUFZLE1BQWUsRUFBRSxPQUFtQixFQUFFLEVBQVUsRUFBRSxXQUF1QixFQUFFLFdBQXVCO0FBQUksUUFFaEgsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLFFBQ0ksc0VBQXNFO0FBQzFFLFFBQUksSUFBSTtBQUNSLFlBQU0sSUFBSSxNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDL0IsZ0JBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO0FBQ25DLG9CQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLGNBQU0sT0FBQSxXQUFXLEVBQUUsRUFBYixDQUFhLENBQUM7QUFDdkYsb0JBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsY0FBTSxPQUFBLFdBQVcsRUFBRSxFQUFiLENBQWEsQ0FBQztBQUN4RixpQkFBUyxDQUFDLENBQUM7QUFDWCxhQUFPO0FBQUMsaUJBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxRQUFRLEVBQUU7QUFDdEMsZ0JBQVEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLE9BQU8sRUFBRSxFQUFULENBQVMsQ0FBQyxDQUFDO0FBQzdDLGdCQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxhQUFPO0FBQ1AsU0FBSztBQUFDLFFBQUEsT0FBTyxDQUFDLEVBQUU7QUFDaEIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUVILElBQUUsdUNBQVcsR0FBWCxVQUFZLEdBQVc7QUFBSSxRQUN6QixJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7QUFDckIsWUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQztBQUNyRCxpQkFBUyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxPQUFPLEdBQUcsQ0FBQztBQUNqQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFBRSw0Q0FBZ0IsR0FBaEIsVUFBaUIsS0FBYTtBQUNoQyxRQUFJLE9BQU8sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQ3RELElBQUUsQ0FBQztBQUVILElBQUUsdUNBQVcsR0FBWCxVQUFhLFVBQWtCO0FBQUksUUFDakMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3hDLFlBQU0sT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2xHLFNBQUs7QUFDTCxRQUFJLElBQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDcEUsUUFBSSxJQUFJLENBQUMsYUFBYTtBQUN0QixlQUFTLGFBQWEsS0FBSyxNQUFNLElBQUksYUFBYSxLQUFLLEtBQUs7QUFDNUQsZUFBUyxhQUFhLEtBQUssS0FBSyxJQUFJLGFBQWEsS0FBSyxLQUFLO0FBQzNELGVBQVMsYUFBYSxLQUFLLEtBQUssRUFBRTtBQUNsQyxZQUFNLE9BQU8sT0FBTyxDQUFDO0FBQ3JCLFNBQUs7QUFDTCxhQUFTLElBQUksYUFBYSxLQUFLLEtBQUssSUFBSSxhQUFhLEtBQUssS0FBSztBQUMvRCxlQUFTLGFBQWEsS0FBSyxLQUFLLElBQUksYUFBYSxLQUFLLEtBQUs7QUFDM0QsZUFBUyxhQUFhLEtBQUssS0FBSyxFQUFFO0FBQ2xDLFlBQU0sT0FBTyxPQUFPLENBQUM7QUFDckIsU0FBSztBQUNMLFFBQUksT0FBTyxTQUFTLENBQUM7QUFDckIsSUFBQSxDQUFDO0FBRUQsSUFBVSw0Q0FBZ0IsR0FBeEIsVUFBeUIsRUFBVTtBQUFJLFFBQ3JDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsSUFBRSxDQUFDO0FBRUgsSUFBVSwrQ0FBbUIsR0FBM0IsVUFBNEIsRUFBVTtBQUFJLFFBQ3hDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLElBQUUsQ0FBQztBQUNGO0FBQzRELGdCQTlEN0IsU0FBUztBQUFHO0FBR3hDO0lBTlMsaUJBQWlCLHdCQUg3QixVQUFVLENBQUMsY0FDVixVQUFVLEVBQUUsTUFBTSxVQUNuQixDQUFDLFFBQ1csaUJBQWlCLENBZ0U3Qjs7Ozs7OzBFQUNEO0FBQUMsNEJBdEVEO0FBQUUsQ0FxRUQsQUFoRUQsSUFnRUM7QUFDRCxTQWpFYSxpQkFBaUI7QUFDN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdGFibGUsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEdhbGxlcnlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzd2lwZUhhbmRsZXJzOiBNYXA8c3RyaW5nLCAoKCkgPT4gdm9pZClbXT4gPSBuZXcgTWFwPHN0cmluZywgKCgpID0+IHZvaWQpW10+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gIH1cblxuICBtYW5hZ2VTd2lwZShzdGF0dXM6IGJvb2xlYW4sIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGlkOiBzdHJpbmcsIG5leHRIYW5kbGVyOiAoKSA9PiB2b2lkLCBwcmV2SGFuZGxlcjogKCkgPT4gdm9pZCk6IHZvaWQge1xuXG4gICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmdldFN3aXBlSGFuZGxlcnMoaWQpO1xuXG4gICAgLy8gc3dpcGVsZWZ0IGFuZCBzd2lwZXJpZ2h0IGFyZSBhdmFpbGFibGUgb25seSBpZiBoYW1tZXJqcyBpcyBpbmNsdWRlZFxuICAgIHRyeSB7XG4gICAgICBpZiAoc3RhdHVzICYmICFoYW5kbGVycykge1xuICAgICAgICB0aGlzLnN3aXBlSGFuZGxlcnMuc2V0KGlkLCBbXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWxlbWVudC5uYXRpdmVFbGVtZW50LCAnc3dpcGVsZWZ0JywgKCkgPT4gbmV4dEhhbmRsZXIoKSksXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oZWxlbWVudC5uYXRpdmVFbGVtZW50LCAnc3dpcGVyaWdodCcsICgpID0+IHByZXZIYW5kbGVyKCkpXG4gICAgICAgIF0pO1xuICAgICAgfSBlbHNlIGlmICghc3RhdHVzICYmIGhhbmRsZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzLm1hcCgoaGFuZGxlcikgPT4gaGFuZGxlcigpKTtcbiAgICAgICAgdGhpcy5yZW1vdmVTd2lwZUhhbmRsZXJzKGlkKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVVcmwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh1cmwucmVwbGFjZSkge1xuICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKG5ldyBSZWdFeHAoJyAnLCAnZycpLCAnJTIwJylcbiAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFwnJywgJ2cnKSwgJyUyNycpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfVxuXG4gIGdldEJhY2tncm91bmRVcmwoaW1hZ2U6IHN0cmluZykge1xuICAgIHJldHVybiAndXJsKFxcJycgKyB0aGlzLnZhbGlkYXRlVXJsKGltYWdlKSArICdcXCcpJztcbiAgfVxuXG4gIGdldEZpbGVUeXBlIChmaWxlU291cmNlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChmaWxlU291cmNlLnN0YXJ0c1dpdGgoJ2RhdGE6JykpIHtcbiAgICAgIHJldHVybiBmaWxlU291cmNlLnN1YnN0cig1LCBNYXRoLm1pbihmaWxlU291cmNlLmluZGV4T2YoJzsnKSwgZmlsZVNvdXJjZS5pbmRleE9mKCcvJykpIC0gNSk7XG4gICAgfVxuICAgIGNvbnN0IGZpbGVFeHRlbnNpb24gPSBmaWxlU291cmNlLnNwbGl0KCcuJykucG9wKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoIWZpbGVFeHRlbnNpb25cbiAgICAgIHx8IGZpbGVFeHRlbnNpb24gPT09ICdqcGVnJyB8fCBmaWxlRXh0ZW5zaW9uID09PSAnanBnJ1xuICAgICAgfHwgZmlsZUV4dGVuc2lvbiA9PT0gJ3BuZycgfHwgZmlsZUV4dGVuc2lvbiA9PT0gJ2JtcCdcbiAgICAgIHx8IGZpbGVFeHRlbnNpb24gPT09ICdnaWYnKSB7XG4gICAgICByZXR1cm4gJ2ltYWdlJztcbiAgICB9XG4gICAgZWxzZSBpZiAoZmlsZUV4dGVuc2lvbiA9PT0gJ2F2aScgfHwgZmlsZUV4dGVuc2lvbiA9PT0gJ2ZsdidcbiAgICAgIHx8IGZpbGVFeHRlbnNpb24gPT09ICd3bXYnIHx8IGZpbGVFeHRlbnNpb24gPT09ICdtb3YnXG4gICAgICB8fCBmaWxlRXh0ZW5zaW9uID09PSAnbXA0Jykge1xuICAgICAgcmV0dXJuICd2aWRlbyc7XG4gICAgfVxuICAgIHJldHVybiAndW5rbm93bic7XG59XG5cbiAgcHJpdmF0ZSBnZXRTd2lwZUhhbmRsZXJzKGlkOiBzdHJpbmcpOiAoKCkgPT4gdm9pZClbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuc3dpcGVIYW5kbGVycy5nZXQoaWQpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVTd2lwZUhhbmRsZXJzKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnN3aXBlSGFuZGxlcnMuZGVsZXRlKGlkKTtcbiAgfVxufVxuIl19