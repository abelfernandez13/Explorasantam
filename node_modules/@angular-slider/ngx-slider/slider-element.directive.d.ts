import { ElementRef, Renderer2, ChangeDetectorRef } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class SliderElementDirective {
    protected elemRef: ElementRef;
    protected renderer: Renderer2;
    protected changeDetectionRef: ChangeDetectorRef;
    private _position;
    readonly position: number;
    private _dimension;
    readonly dimension: number;
    private _alwaysHide;
    readonly alwaysHide: boolean;
    private _vertical;
    readonly vertical: boolean;
    private _scale;
    readonly scale: number;
    private _rotate;
    readonly rotate: number;
    opacity: number;
    visibility: string;
    left: string;
    bottom: string;
    height: string;
    width: string;
    transform: string;
    private eventListenerHelper;
    private eventListeners;
    constructor(elemRef: ElementRef, renderer: Renderer2, changeDetectionRef: ChangeDetectorRef);
    setAlwaysHide(hide: boolean): void;
    hide(): void;
    show(): void;
    isVisible(): boolean;
    setVertical(vertical: boolean): void;
    setScale(scale: number): void;
    setRotate(rotate: number): void;
    getRotate(): number;
    setPosition(pos: number): void;
    calculateDimension(): void;
    setDimension(dim: number): void;
    getBoundingClientRect(): ClientRect;
    on(eventName: string, callback: (event: any) => void, debounceInterval?: number): void;
    onPassive(eventName: string, callback: (event: any) => void, debounceInterval?: number): void;
    off(eventName?: string): void;
    private isRefDestroyed();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderElementDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SliderElementDirective, "[ngxSliderElement]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWVsZW1lbnQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInNsaWRlci1lbGVtZW50LmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTbGlkZXJFbGVtZW50RGlyZWN0aXZlIHtcbiAgICBwcm90ZWN0ZWQgZWxlbVJlZjogRWxlbWVudFJlZjtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0aW9uUmVmOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjtcbiAgICByZWFkb25seSBwb3NpdGlvbjogbnVtYmVyO1xuICAgIHByaXZhdGUgX2RpbWVuc2lvbjtcbiAgICByZWFkb25seSBkaW1lbnNpb246IG51bWJlcjtcbiAgICBwcml2YXRlIF9hbHdheXNIaWRlO1xuICAgIHJlYWRvbmx5IGFsd2F5c0hpZGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfdmVydGljYWw7XG4gICAgcmVhZG9ubHkgdmVydGljYWw6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfc2NhbGU7XG4gICAgcmVhZG9ubHkgc2NhbGU6IG51bWJlcjtcbiAgICBwcml2YXRlIF9yb3RhdGU7XG4gICAgcmVhZG9ubHkgcm90YXRlOiBudW1iZXI7XG4gICAgb3BhY2l0eTogbnVtYmVyO1xuICAgIHZpc2liaWxpdHk6IHN0cmluZztcbiAgICBsZWZ0OiBzdHJpbmc7XG4gICAgYm90dG9tOiBzdHJpbmc7XG4gICAgaGVpZ2h0OiBzdHJpbmc7XG4gICAgd2lkdGg6IHN0cmluZztcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcbiAgICBwcml2YXRlIGV2ZW50TGlzdGVuZXJIZWxwZXI7XG4gICAgcHJpdmF0ZSBldmVudExpc3RlbmVycztcbiAgICBjb25zdHJ1Y3RvcihlbGVtUmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjaGFuZ2VEZXRlY3Rpb25SZWY6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBzZXRBbHdheXNIaWRlKGhpZGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgaXNWaXNpYmxlKCk6IGJvb2xlYW47XG4gICAgc2V0VmVydGljYWwodmVydGljYWw6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHNldFNjYWxlKHNjYWxlOiBudW1iZXIpOiB2b2lkO1xuICAgIHNldFJvdGF0ZShyb3RhdGU6IG51bWJlcik6IHZvaWQ7XG4gICAgZ2V0Um90YXRlKCk6IG51bWJlcjtcbiAgICBzZXRQb3NpdGlvbihwb3M6IG51bWJlcik6IHZvaWQ7XG4gICAgY2FsY3VsYXRlRGltZW5zaW9uKCk6IHZvaWQ7XG4gICAgc2V0RGltZW5zaW9uKGRpbTogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKTogQ2xpZW50UmVjdDtcbiAgICBvbihldmVudE5hbWU6IHN0cmluZywgY2FsbGJhY2s6IChldmVudDogYW55KSA9PiB2b2lkLCBkZWJvdW5jZUludGVydmFsPzogbnVtYmVyKTogdm9pZDtcbiAgICBvblBhc3NpdmUoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZlbnQ6IGFueSkgPT4gdm9pZCwgZGVib3VuY2VJbnRlcnZhbD86IG51bWJlcik6IHZvaWQ7XG4gICAgb2ZmKGV2ZW50TmFtZT86IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpc1JlZkRlc3Ryb3llZCgpO1xufVxuIl19