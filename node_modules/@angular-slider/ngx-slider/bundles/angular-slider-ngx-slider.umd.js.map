{"version":3,"file":"angular-slider-ngx-slider.umd.js","sources":["angular-slider-ngx-slider.umd.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('detect-passive-events'), require('@angular/core'), require('@angular/forms'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular-slider/ngx-slider', ['exports', 'rxjs', 'rxjs/operators', 'detect-passive-events', '@angular/core', '@angular/forms', '@angular/common'], factory) :\n    (factory((global['angular-slider'] = global['angular-slider'] || {}, global['angular-slider']['ngx-slider'] = {}),global.rxjs,global.rxjs.operators,null,global.ng.core,global.ng.forms,global.ng.common));\n}(this, (function (exports,rxjs,operators,detectPassiveEvents,core,forms,common) { 'use strict';\n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation. All rights reserved.\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n    this file except in compliance with the License. You may obtain a copy of the\n    License at http://www.apache.org/licenses/LICENSE-2.0\n\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n    MERCHANTABLITY OR NON-INFRINGEMENT.\n\n    See the Apache Version 2.0 License for specific language governing permissions\n    and limitations under the License.\n    ***************************************************************************** */\n    /* global Reflect, Promise */\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    function __extends(d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }\n    function __values(o) {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n        if (m)\n            return m.call(o);\n        return {\n            next: function () {\n                if (o && i >= o.length)\n                    o = void 0;\n                return { value: o && o[i++], done: !o };\n            }\n        };\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /** @enum {number} */\n    var LabelType = {\n        /** Label above low pointer */\n        Low: 0,\n        /** Label above high pointer */\n        High: 1,\n        /** Label for minimum slider value */\n        Floor: 2,\n        /** Label for maximum slider value */\n        Ceil: 3,\n        /** Label below legend tick */\n        TickValue: 4,\n    };\n    LabelType[LabelType.Low] = 'Low';\n    LabelType[LabelType.High] = 'High';\n    LabelType[LabelType.Floor] = 'Floor';\n    LabelType[LabelType.Ceil] = 'Ceil';\n    LabelType[LabelType.TickValue] = 'TickValue';\n    /**\n     * Slider options\n     */\n    var /**\n     * Slider options\n     */ Options = /** @class */ (function () {\n        function Options() {\n            /**\n             * Minimum value for a slider.\n             * Not applicable when using stepsArray.\n             */\n            this.floor = 0;\n            /**\n             * Maximum value for a slider.\n             * Not applicable when using stepsArray.\n             */\n            this.ceil = null;\n            /**\n             * Step between each value.\n             * Not applicable when using stepsArray.\n             */\n            this.step = 1;\n            /**\n             * The minimum range authorized on the slider.\n             * Applies to range slider only.\n             * When using stepsArray, expressed as index into stepsArray.\n             */\n            this.minRange = null;\n            /**\n             * The maximum range authorized on the slider.\n             * Applies to range slider only.\n             * When using stepsArray, expressed as index into stepsArray.\n             */\n            this.maxRange = null;\n            /**\n             * Set to true to have a push behavior. When the min handle goes above the max,\n             * the max is moved as well (and vice-versa). The range between min and max is\n             * defined by the step option (defaults to 1) and can also be overriden by\n             * the minRange option. Applies to range slider only.\n             */\n            this.pushRange = false;\n            /**\n             * The minimum value authorized on the slider.\n             * When using stepsArray, expressed as index into stepsArray.\n             */\n            this.minLimit = null;\n            /**\n             * The maximum value authorized on the slider.\n             * When using stepsArray, expressed as index into stepsArray.\n             */\n            this.maxLimit = null;\n            /**\n             * Custom translate function. Use this if you want to translate values displayed\n             * on the slider.\n             */\n            this.translate = null;\n            /**\n             * Custom function for combining overlapping labels in range slider.\n             * It takes the min and max values (already translated with translate fuction)\n             * and should return how these two values should be combined.\n             * If not provided, the default function will join the two values with\n             * ' - ' as separator.\n             */\n            this.combineLabels = null;\n            /**\n             * Use to display legend under ticks (thus, it needs to be used along with\n             * showTicks or showTicksValues). The function will be called with each tick\n             * value and returned content will be displayed under the tick as a legend.\n             * If the returned value is null, then no legend is displayed under\n             * the corresponding tick.You can also directly provide the legend values\n             * in the stepsArray option.\n             */\n            this.getLegend = null;\n            /**\n             * Use to display a custom legend of a stepItem from stepsArray.\n             * It will be the same as getLegend but for stepsArray.\n             */\n            this.getStepLegend = null;\n            /**\n             * If you want to display a slider with non linear/number steps.\n             * Just pass an array with each slider value and that's it; the floor, ceil and step settings\n             * of the slider will be computed automatically.\n             * By default, the value model and valueHigh model values will be the value of the selected item\n             * in the stepsArray.\n             * They can also be bound to the index of the selected item by setting the bindIndexForStepsArray\n             * option to true.\n             */\n            this.stepsArray = null;\n            /**\n             * Set to true to bind the index of the selected item to value model and valueHigh model.\n             */\n            this.bindIndexForStepsArray = false;\n            /**\n             * When set to true and using a range slider, the range can be dragged by the selection bar.\n             * Applies to range slider only.\n             */\n            this.draggableRange = false;\n            /**\n             * Same as draggableRange but the slider range can't be changed.\n             * Applies to range slider only.\n             */\n            this.draggableRangeOnly = false;\n            /**\n             * Set to true to always show the selection bar before the slider handle.\n             */\n            this.showSelectionBar = false;\n            /**\n             * Set to true to always show the selection bar after the slider handle.\n             */\n            this.showSelectionBarEnd = false;\n            /**\n             * Set a number to draw the selection bar between this value and the slider handle.\n             * When using stepsArray, expressed as index into stepsArray.\n             */\n            this.showSelectionBarFromValue = null;\n            /**\n             * Only for range slider. Set to true to visualize in different colour the areas\n             * on the left/right (top/bottom for vertical range slider) of selection bar between the handles.\n             */\n            this.showOuterSelectionBars = false;\n            /**\n             * Set to true to hide pointer labels\n             */\n            this.hidePointerLabels = false;\n            /**\n             * Set to true to hide min / max labels\n             */\n            this.hideLimitLabels = false;\n            /**\n             * Set to false to disable the auto-hiding behavior of the limit labels.\n             */\n            this.autoHideLimitLabels = true;\n            /**\n             * Set to true to make the slider read-only.\n             */\n            this.readOnly = false;\n            /**\n             * Set to true to disable the slider.\n             */\n            this.disabled = false;\n            /**\n             * Set to true to display a tick for each step of the slider.\n             */\n            this.showTicks = false;\n            /**\n             * Set to true to display a tick and the step value for each step of the slider..\n             */\n            this.showTicksValues = false;\n            /* The step between each tick to display. If not set, the step value is used.\n                Not used when ticksArray is specified. */\n            this.tickStep = null;\n            /* The step between displaying each tick step value.\n                If not set, then tickStep or step is used, depending on which one is set. */\n            this.tickValueStep = null;\n            /**\n             * Use to display ticks at specific positions.\n             * The array contains the index of the ticks that should be displayed.\n             * For example, [0, 1, 5] will display a tick for the first, second and sixth values.\n             */\n            this.ticksArray = null;\n            /**\n             * Used to display a tooltip when a tick is hovered.\n             * Set to a function that returns the tooltip content for a given value.\n             */\n            this.ticksTooltip = null;\n            /**\n             * Same as ticksTooltip but for ticks values.\n             */\n            this.ticksValuesTooltip = null;\n            /**\n             * Set to true to display the slider vertically.\n             * The slider will take the full height of its parent.\n             * Changing this value at runtime is not currently supported.\n             */\n            this.vertical = false;\n            /**\n             * Function that returns the current color of the selection bar.\n             * If your color won't change, don't use this option but set it through CSS.\n             * If the returned color depends on a model value (either value or valueHigh),\n             * you should use the argument passed to the function.\n             * Indeed, when the function is called, there is no certainty that the model\n             * has already been updated.\n             */\n            this.getSelectionBarColor = null;\n            /**\n             * Function that returns the color of a tick. showTicks must be enabled.\n             */\n            this.getTickColor = null;\n            /**\n             * Function that returns the current color of a pointer.\n             * If your color won't change, don't use this option but set it through CSS.\n             * If the returned color depends on a model value (either value or valueHigh),\n             * you should use the argument passed to the function.\n             * Indeed, when the function is called, there is no certainty that the model has already been updated.\n             * To handle range slider pointers independently, you should evaluate pointerType within the given\n             * function where \"min\" stands for value model and \"max\" for valueHigh model values.\n             */\n            this.getPointerColor = null;\n            /**\n             * Handles are focusable (on click or with tab) and can be modified using the following keyboard controls:\n             * Left/bottom arrows: -1\n             * Right/top arrows: +1\n             * Page-down: -10%\n             * Page-up: +10%\n             * Home: minimum value\n             * End: maximum value\n             */\n            this.keyboardSupport = true;\n            /**\n             * If you display the slider in an element that uses transform: scale(0.5), set the scale value to 2\n             * so that the slider is rendered properly and the events are handled correctly.\n             */\n            this.scale = 1;\n            /**\n             * If you display the slider in an element that uses transform: rotate(90deg), set the rotate value to 90\n             * so that the slider is rendered properly and the events are handled correctly. Value is in degrees.\n             */\n            this.rotate = 0;\n            /**\n             * Set to true to force the value(s) to be rounded to the step, even when modified from the outside.\n             * When set to false, if the model values are modified from outside the slider, they are not rounded\n             * and can be between two steps.\n             */\n            this.enforceStep = true;\n            /**\n             * Set to true to force the value(s) to be normalised to allowed range (floor to ceil), even when modified from the outside.\n             * When set to false, if the model values are modified from outside the slider, and they are outside allowed range,\n             * the slider may be rendered incorrectly. However, setting this to false may be useful if you want to perform custom normalisation.\n             */\n            this.enforceRange = true;\n            /**\n             * Set to true to force the value(s) to be rounded to the nearest step value, even when modified from the outside.\n             * When set to false, if the model values are modified from outside the slider, and they are outside allowed range,\n             * the slider may be rendered incorrectly. However, setting this to false may be useful if you want to perform custom normalisation.\n             */\n            this.enforceStepsArray = true;\n            /**\n             * Set to true to prevent to user from switching the min and max handles. Applies to range slider only.\n             */\n            this.noSwitching = false;\n            /**\n             * Set to true to only bind events on slider handles.\n             */\n            this.onlyBindHandles = false;\n            /**\n             * Set to true to show graphs right to left.\n             * If vertical is true it will be from top to bottom and left / right arrow functions reversed.\n             */\n            this.rightToLeft = false;\n            /**\n             * Set to true to reverse keyboard navigation:\n             * Right/top arrows: -1\n             * Left/bottom arrows: +1\n             * Page-up: -10%\n             * Page-down: +10%\n             * End: minimum value\n             * Home: maximum value\n             */\n            this.reversedControls = false;\n            /**\n             * Set to true to keep the slider labels inside the slider bounds.\n             */\n            this.boundPointerLabels = true;\n            /**\n             * Set to true to use a logarithmic scale to display the slider.\n             */\n            this.logScale = false;\n            /**\n             * Function that returns the position on the slider for a given value.\n             * The position must be a percentage between 0 and 1.\n             * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n             */\n            this.customValueToPosition = null;\n            /**\n             * Function that returns the value for a given position on the slider.\n             * The position is a percentage between 0 and 1.\n             * The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly.\n             */\n            this.customPositionToValue = null;\n            /**\n             * Precision limit for calculated values.\n             * Values used in calculations will be rounded to this number of significant digits\n             * to prevent accumulating small floating-point errors.\n             */\n            this.precisionLimit = 12;\n            /**\n             * Use to display the selection bar as a gradient.\n             * The given object must contain from and to properties which are colors.\n             */\n            this.selectionBarGradient = null;\n            /**\n             * Use to add a label directly to the slider for accessibility. Adds the aria-label attribute.\n             */\n            this.ariaLabel = 'ngx-slider';\n            /**\n             * Use instead of ariaLabel to reference the id of an element which will be used to label the slider.\n             * Adds the aria-labelledby attribute.\n             */\n            this.ariaLabelledBy = null;\n            /**\n             * Use to add a label directly to the slider range for accessibility. Adds the aria-label attribute.\n             */\n            this.ariaLabelHigh = 'ngx-slider-max';\n            /**\n             * Use instead of ariaLabelHigh to reference the id of an element which will be used to label the slider range.\n             * Adds the aria-labelledby attribute.\n             */\n            this.ariaLabelledByHigh = null;\n            /**\n             * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the handle\n             */\n            this.handleDimension = null;\n            /**\n             * Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the bar\n             */\n            this.barDimension = null;\n            /**\n             * Enable/disable CSS animations\n             */\n            this.animate = true;\n            /**\n             * Enable/disable CSS animations while moving the slider\n             */\n            this.animateOnMove = false;\n        }\n        return Options;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /** @enum {number} */\n    var PointerType = {\n        /** Low pointer */\n        Min: 0,\n        /** High pointer */\n        Max: 1,\n    };\n    PointerType[PointerType.Min] = 'Min';\n    PointerType[PointerType.Max] = 'Max';\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    var ChangeContext = /** @class */ (function () {\n        function ChangeContext() {\n        }\n        return ChangeContext;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     *  Collection of functions to handle conversions/lookups of values\n     */\n    var /**\n     *  Collection of functions to handle conversions/lookups of values\n     */ ValueHelper = /** @class */ (function () {\n        function ValueHelper() {\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        ValueHelper.isNullOrUndefined = /**\n         * @param {?} value\n         * @return {?}\n         */\n            function (value) {\n                return value === undefined || value === null;\n            };\n        /**\n         * @param {?} array1\n         * @param {?} array2\n         * @return {?}\n         */\n        ValueHelper.areArraysEqual = /**\n         * @param {?} array1\n         * @param {?} array2\n         * @return {?}\n         */\n            function (array1, array2) {\n                if (array1.length !== array2.length) {\n                    return false;\n                }\n                for (var i = 0; i < array1.length; ++i) {\n                    if (array1[i] !== array2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n        /**\n         * @param {?} val\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n        ValueHelper.linearValueToPosition = /**\n         * @param {?} val\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n            function (val, minVal, maxVal) {\n                /** @type {?} */\n                var range = maxVal - minVal;\n                return (val - minVal) / range;\n            };\n        /**\n         * @param {?} val\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n        ValueHelper.logValueToPosition = /**\n         * @param {?} val\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n            function (val, minVal, maxVal) {\n                val = Math.log(val);\n                minVal = Math.log(minVal);\n                maxVal = Math.log(maxVal);\n                /** @type {?} */\n                var range = maxVal - minVal;\n                return (val - minVal) / range;\n            };\n        /**\n         * @param {?} percent\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n        ValueHelper.linearPositionToValue = /**\n         * @param {?} percent\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n            function (percent, minVal, maxVal) {\n                return percent * (maxVal - minVal) + minVal;\n            };\n        /**\n         * @param {?} percent\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n        ValueHelper.logPositionToValue = /**\n         * @param {?} percent\n         * @param {?} minVal\n         * @param {?} maxVal\n         * @return {?}\n         */\n            function (percent, minVal, maxVal) {\n                minVal = Math.log(minVal);\n                maxVal = Math.log(maxVal);\n                /** @type {?} */\n                var value = percent * (maxVal - minVal) + minVal;\n                return Math.exp(value);\n            };\n        /**\n         * @param {?} modelValue\n         * @param {?} stepsArray\n         * @return {?}\n         */\n        ValueHelper.findStepIndex = /**\n         * @param {?} modelValue\n         * @param {?} stepsArray\n         * @return {?}\n         */\n            function (modelValue, stepsArray) {\n                /** @type {?} */\n                var differences = stepsArray.map(function (step) { return Math.abs(modelValue - step.value); });\n                /** @type {?} */\n                var minDifferenceIndex = 0;\n                for (var index = 0; index < stepsArray.length; index++) {\n                    if (differences[index] !== differences[minDifferenceIndex] && differences[index] < differences[minDifferenceIndex]) {\n                        minDifferenceIndex = index;\n                    }\n                }\n                return minDifferenceIndex;\n            };\n        return ValueHelper;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Helper with compatibility functions to support different browsers\n     */\n    var /**\n     * Helper with compatibility functions to support different browsers\n     */ CompatibilityHelper = /** @class */ (function () {\n        function CompatibilityHelper() {\n        }\n        /**\n         * Workaround for TouchEvent constructor sadly not being available on all browsers (e.g. Firefox, Safari)\n         * @param {?} event\n         * @return {?}\n         */\n        CompatibilityHelper.isTouchEvent = /**\n         * Workaround for TouchEvent constructor sadly not being available on all browsers (e.g. Firefox, Safari)\n         * @param {?} event\n         * @return {?}\n         */\n            function (event) {\n                if (( /** @type {?} */(window)).TouchEvent !== undefined) {\n                    return event instanceof TouchEvent;\n                }\n                return event.touches !== undefined;\n            };\n        /**\n         * Detect presence of ResizeObserver API\n         * @return {?}\n         */\n        CompatibilityHelper.isResizeObserverAvailable = /**\n         * Detect presence of ResizeObserver API\n         * @return {?}\n         */\n            function () {\n                return ( /** @type {?} */(window)).ResizeObserver !== undefined;\n            };\n        return CompatibilityHelper;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Helper with mathematical functions\n     */\n    var /**\n     * Helper with mathematical functions\n     */ MathHelper = /** @class */ (function () {\n        function MathHelper() {\n        }\n        /* Round numbers to a given number of significant digits */\n        /**\n         * @param {?} value\n         * @param {?} precisionLimit\n         * @return {?}\n         */\n        MathHelper.roundToPrecisionLimit = /**\n         * @param {?} value\n         * @param {?} precisionLimit\n         * @return {?}\n         */\n            function (value, precisionLimit) {\n                return +(value.toPrecision(precisionLimit));\n            };\n        /**\n         * @param {?} value\n         * @param {?} modulo\n         * @param {?} precisionLimit\n         * @return {?}\n         */\n        MathHelper.isModuloWithinPrecisionLimit = /**\n         * @param {?} value\n         * @param {?} modulo\n         * @param {?} precisionLimit\n         * @return {?}\n         */\n            function (value, modulo, precisionLimit) {\n                /** @type {?} */\n                var limit = Math.pow(10, -precisionLimit);\n                return Math.abs(value % modulo) <= limit || Math.abs(Math.abs(value % modulo) - modulo) <= limit;\n            };\n        /**\n         * @param {?} value\n         * @param {?} floor\n         * @param {?} ceil\n         * @return {?}\n         */\n        MathHelper.clampToRange = /**\n         * @param {?} value\n         * @param {?} floor\n         * @param {?} ceil\n         * @return {?}\n         */\n            function (value, floor, ceil) {\n                return Math.min(Math.max(value, floor), ceil);\n            };\n        return MathHelper;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    var EventListener = /** @class */ (function () {\n        function EventListener() {\n            this.eventName = null;\n            this.events = null;\n            this.eventsSubscription = null;\n            this.teardownCallback = null;\n        }\n        return EventListener;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * Helper class to attach event listeners to DOM elements with debounce support using rxjs\n     */\n    var /**\n     * Helper class to attach event listeners to DOM elements with debounce support using rxjs\n     */ EventListenerHelper = /** @class */ (function () {\n        function EventListenerHelper(renderer) {\n            this.renderer = renderer;\n        }\n        /**\n         * @param {?} nativeElement\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} throttleInterval\n         * @return {?}\n         */\n        EventListenerHelper.prototype.attachPassiveEventListener = /**\n         * @param {?} nativeElement\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} throttleInterval\n         * @return {?}\n         */\n            function (nativeElement, eventName, callback, throttleInterval) {\n                // Only use passive event listeners if the browser supports it\n                if (detectPassiveEvents.supportsPassiveEvents !== true) {\n                    return this.attachEventListener(nativeElement, eventName, callback, throttleInterval);\n                }\n                /** @type {?} */\n                var listener = new EventListener();\n                listener.eventName = eventName;\n                listener.events = new rxjs.Subject();\n                /** @type {?} */\n                var observerCallback = function (event) {\n                    listener.events.next(event);\n                };\n                nativeElement.addEventListener(eventName, observerCallback, { passive: true, capture: false });\n                listener.teardownCallback = function () {\n                    nativeElement.removeEventListener(eventName, observerCallback, { passive: true, capture: false });\n                };\n                listener.eventsSubscription = listener.events\n                    .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n                    ? operators.throttleTime(throttleInterval, undefined, { leading: true, trailing: true })\n                    : operators.tap(function () { }) // no-op\n                )\n                    .subscribe(function (event) {\n                    callback(event);\n                });\n                return listener;\n            };\n        /**\n         * @param {?} eventListener\n         * @return {?}\n         */\n        EventListenerHelper.prototype.detachEventListener = /**\n         * @param {?} eventListener\n         * @return {?}\n         */\n            function (eventListener) {\n                if (!ValueHelper.isNullOrUndefined(eventListener.eventsSubscription)) {\n                    eventListener.eventsSubscription.unsubscribe();\n                    eventListener.eventsSubscription = null;\n                }\n                if (!ValueHelper.isNullOrUndefined(eventListener.events)) {\n                    eventListener.events.complete();\n                    eventListener.events = null;\n                }\n                if (!ValueHelper.isNullOrUndefined(eventListener.teardownCallback)) {\n                    eventListener.teardownCallback();\n                    eventListener.teardownCallback = null;\n                }\n            };\n        /**\n         * @param {?} nativeElement\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} throttleInterval\n         * @return {?}\n         */\n        EventListenerHelper.prototype.attachEventListener = /**\n         * @param {?} nativeElement\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} throttleInterval\n         * @return {?}\n         */\n            function (nativeElement, eventName, callback, throttleInterval) {\n                /** @type {?} */\n                var listener = new EventListener();\n                listener.eventName = eventName;\n                listener.events = new rxjs.Subject();\n                /** @type {?} */\n                var observerCallback = function (event) {\n                    listener.events.next(event);\n                };\n                listener.teardownCallback = this.renderer.listen(nativeElement, eventName, observerCallback);\n                listener.eventsSubscription = listener.events\n                    .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n                    ? operators.throttleTime(throttleInterval, undefined, { leading: true, trailing: true })\n                    : operators.tap(function () { }) // no-op\n                )\n                    .subscribe(function (event) { callback(event); });\n                return listener;\n            };\n        return EventListenerHelper;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    var SliderElementDirective = /** @class */ (function () {\n        function SliderElementDirective(elemRef, renderer, changeDetectionRef) {\n            this.elemRef = elemRef;\n            this.renderer = renderer;\n            this.changeDetectionRef = changeDetectionRef;\n            this._position = 0;\n            this._dimension = 0;\n            this._alwaysHide = false;\n            this._vertical = false;\n            this._scale = 1;\n            this._rotate = 0;\n            this.opacity = 1;\n            this.visibility = 'visible';\n            this.left = '';\n            this.bottom = '';\n            this.height = '';\n            this.width = '';\n            this.transform = '';\n            this.eventListeners = [];\n            this.eventListenerHelper = new EventListenerHelper(this.renderer);\n        }\n        Object.defineProperty(SliderElementDirective.prototype, \"position\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this._position;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderElementDirective.prototype, \"dimension\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this._dimension;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderElementDirective.prototype, \"alwaysHide\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this._alwaysHide;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderElementDirective.prototype, \"vertical\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this._vertical;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderElementDirective.prototype, \"scale\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this._scale;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderElementDirective.prototype, \"rotate\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this._rotate;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} hide\n         * @return {?}\n         */\n        SliderElementDirective.prototype.setAlwaysHide = /**\n         * @param {?} hide\n         * @return {?}\n         */\n            function (hide) {\n                this._alwaysHide = hide;\n                if (hide) {\n                    this.visibility = 'hidden';\n                }\n                else {\n                    this.visibility = 'visible';\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderElementDirective.prototype.hide = /**\n         * @return {?}\n         */\n            function () {\n                this.opacity = 0;\n            };\n        /**\n         * @return {?}\n         */\n        SliderElementDirective.prototype.show = /**\n         * @return {?}\n         */\n            function () {\n                if (this.alwaysHide) {\n                    return;\n                }\n                this.opacity = 1;\n            };\n        /**\n         * @return {?}\n         */\n        SliderElementDirective.prototype.isVisible = /**\n         * @return {?}\n         */\n            function () {\n                if (this.alwaysHide) {\n                    return false;\n                }\n                return this.opacity !== 0;\n            };\n        /**\n         * @param {?} vertical\n         * @return {?}\n         */\n        SliderElementDirective.prototype.setVertical = /**\n         * @param {?} vertical\n         * @return {?}\n         */\n            function (vertical) {\n                this._vertical = vertical;\n                if (this._vertical) {\n                    this.left = '';\n                    this.width = '';\n                }\n                else {\n                    this.bottom = '';\n                    this.height = '';\n                }\n            };\n        /**\n         * @param {?} scale\n         * @return {?}\n         */\n        SliderElementDirective.prototype.setScale = /**\n         * @param {?} scale\n         * @return {?}\n         */\n            function (scale) {\n                this._scale = scale;\n            };\n        /**\n         * @param {?} rotate\n         * @return {?}\n         */\n        SliderElementDirective.prototype.setRotate = /**\n         * @param {?} rotate\n         * @return {?}\n         */\n            function (rotate) {\n                this._rotate = rotate;\n                this.transform = 'rotate(' + rotate + 'deg)';\n            };\n        /**\n         * @return {?}\n         */\n        SliderElementDirective.prototype.getRotate = /**\n         * @return {?}\n         */\n            function () {\n                return this._rotate;\n            };\n        // Set element left/top position depending on whether slider is horizontal or vertical\n        /**\n         * @param {?} pos\n         * @return {?}\n         */\n        SliderElementDirective.prototype.setPosition = /**\n         * @param {?} pos\n         * @return {?}\n         */\n            function (pos) {\n                if (this._position !== pos && !this.isRefDestroyed()) {\n                    this.changeDetectionRef.markForCheck();\n                }\n                this._position = pos;\n                if (this._vertical) {\n                    this.bottom = Math.round(pos) + 'px';\n                }\n                else {\n                    this.left = Math.round(pos) + 'px';\n                }\n            };\n        // Calculate element's width/height depending on whether slider is horizontal or vertical\n        /**\n         * @return {?}\n         */\n        SliderElementDirective.prototype.calculateDimension = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var val = this.getBoundingClientRect();\n                if (this.vertical) {\n                    this._dimension = (val.bottom - val.top) * this.scale;\n                }\n                else {\n                    this._dimension = (val.right - val.left) * this.scale;\n                }\n            };\n        // Set element width/height depending on whether slider is horizontal or vertical\n        /**\n         * @param {?} dim\n         * @return {?}\n         */\n        SliderElementDirective.prototype.setDimension = /**\n         * @param {?} dim\n         * @return {?}\n         */\n            function (dim) {\n                if (this._dimension !== dim && !this.isRefDestroyed()) {\n                    this.changeDetectionRef.markForCheck();\n                }\n                this._dimension = dim;\n                if (this._vertical) {\n                    this.height = Math.round(dim) + 'px';\n                }\n                else {\n                    this.width = Math.round(dim) + 'px';\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderElementDirective.prototype.getBoundingClientRect = /**\n         * @return {?}\n         */\n            function () {\n                return this.elemRef.nativeElement.getBoundingClientRect();\n            };\n        /**\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} debounceInterval\n         * @return {?}\n         */\n        SliderElementDirective.prototype.on = /**\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} debounceInterval\n         * @return {?}\n         */\n            function (eventName, callback, debounceInterval) {\n                /** @type {?} */\n                var listener = this.eventListenerHelper.attachEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n                this.eventListeners.push(listener);\n            };\n        /**\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} debounceInterval\n         * @return {?}\n         */\n        SliderElementDirective.prototype.onPassive = /**\n         * @param {?} eventName\n         * @param {?} callback\n         * @param {?=} debounceInterval\n         * @return {?}\n         */\n            function (eventName, callback, debounceInterval) {\n                /** @type {?} */\n                var listener = this.eventListenerHelper.attachPassiveEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);\n                this.eventListeners.push(listener);\n            };\n        /**\n         * @param {?=} eventName\n         * @return {?}\n         */\n        SliderElementDirective.prototype.off = /**\n         * @param {?=} eventName\n         * @return {?}\n         */\n            function (eventName) {\n                /** @type {?} */\n                var listenersToKeep;\n                /** @type {?} */\n                var listenersToRemove;\n                if (!ValueHelper.isNullOrUndefined(eventName)) {\n                    listenersToKeep = this.eventListeners.filter(function (event) { return event.eventName !== eventName; });\n                    listenersToRemove = this.eventListeners.filter(function (event) { return event.eventName === eventName; });\n                }\n                else {\n                    listenersToKeep = [];\n                    listenersToRemove = this.eventListeners;\n                }\n                try {\n                    for (var listenersToRemove_1 = __values(listenersToRemove), listenersToRemove_1_1 = listenersToRemove_1.next(); !listenersToRemove_1_1.done; listenersToRemove_1_1 = listenersToRemove_1.next()) {\n                        var listener = listenersToRemove_1_1.value;\n                        this.eventListenerHelper.detachEventListener(listener);\n                    }\n                }\n                catch (e_1_1) {\n                    e_1 = { error: e_1_1 };\n                }\n                finally {\n                    try {\n                        if (listenersToRemove_1_1 && !listenersToRemove_1_1.done && (_a = listenersToRemove_1.return))\n                            _a.call(listenersToRemove_1);\n                    }\n                    finally {\n                        if (e_1)\n                            throw e_1.error;\n                    }\n                }\n                this.eventListeners = listenersToKeep;\n                var e_1, _a;\n            };\n        /**\n         * @return {?}\n         */\n        SliderElementDirective.prototype.isRefDestroyed = /**\n         * @return {?}\n         */\n            function () {\n                return ValueHelper.isNullOrUndefined(this.changeDetectionRef) || this.changeDetectionRef['destroyed'];\n            };\n        SliderElementDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[ngxSliderElement]'\n                    },] },\n        ];\n        /** @nocollapse */\n        SliderElementDirective.ctorParameters = function () {\n            return [\n                { type: core.ElementRef },\n                { type: core.Renderer2 },\n                { type: core.ChangeDetectorRef }\n            ];\n        };\n        SliderElementDirective.propDecorators = {\n            opacity: [{ type: core.HostBinding, args: ['style.opacity',] }],\n            visibility: [{ type: core.HostBinding, args: ['style.visibility',] }],\n            left: [{ type: core.HostBinding, args: ['style.left',] }],\n            bottom: [{ type: core.HostBinding, args: ['style.bottom',] }],\n            height: [{ type: core.HostBinding, args: ['style.height',] }],\n            width: [{ type: core.HostBinding, args: ['style.width',] }],\n            transform: [{ type: core.HostBinding, args: ['style.transform',] }]\n        };\n        return SliderElementDirective;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    var SliderHandleDirective = /** @class */ (function (_super) {\n        __extends(SliderHandleDirective, _super);\n        function SliderHandleDirective(elemRef, renderer, changeDetectionRef) {\n            var _this = _super.call(this, elemRef, renderer, changeDetectionRef) || this;\n            _this.active = false;\n            _this.role = '';\n            _this.tabindex = '';\n            _this.ariaOrientation = '';\n            _this.ariaLabel = '';\n            _this.ariaLabelledBy = '';\n            _this.ariaValueNow = '';\n            _this.ariaValueText = '';\n            _this.ariaValueMin = '';\n            _this.ariaValueMax = '';\n            return _this;\n        }\n        /**\n         * @return {?}\n         */\n        SliderHandleDirective.prototype.focus = /**\n         * @return {?}\n         */\n            function () {\n                this.elemRef.nativeElement.focus();\n            };\n        SliderHandleDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[ngxSliderHandle]'\n                    },] },\n        ];\n        /** @nocollapse */\n        SliderHandleDirective.ctorParameters = function () {\n            return [\n                { type: core.ElementRef },\n                { type: core.Renderer2 },\n                { type: core.ChangeDetectorRef }\n            ];\n        };\n        SliderHandleDirective.propDecorators = {\n            active: [{ type: core.HostBinding, args: ['class.ngx-slider-active',] }],\n            role: [{ type: core.HostBinding, args: ['attr.role',] }],\n            tabindex: [{ type: core.HostBinding, args: ['attr.tabindex',] }],\n            ariaOrientation: [{ type: core.HostBinding, args: ['attr.aria-orientation',] }],\n            ariaLabel: [{ type: core.HostBinding, args: ['attr.aria-label',] }],\n            ariaLabelledBy: [{ type: core.HostBinding, args: ['attr.aria-labelledby',] }],\n            ariaValueNow: [{ type: core.HostBinding, args: ['attr.aria-valuenow',] }],\n            ariaValueText: [{ type: core.HostBinding, args: ['attr.aria-valuetext',] }],\n            ariaValueMin: [{ type: core.HostBinding, args: ['attr.aria-valuemin',] }],\n            ariaValueMax: [{ type: core.HostBinding, args: ['attr.aria-valuemax',] }]\n        };\n        return SliderHandleDirective;\n    }(SliderElementDirective));\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    var SliderLabelDirective = /** @class */ (function (_super) {\n        __extends(SliderLabelDirective, _super);\n        function SliderLabelDirective(elemRef, renderer, changeDetectionRef) {\n            var _this = _super.call(this, elemRef, renderer, changeDetectionRef) || this;\n            _this._value = null;\n            return _this;\n        }\n        Object.defineProperty(SliderLabelDirective.prototype, \"value\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this._value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SliderLabelDirective.prototype.setValue = /**\n         * @param {?} value\n         * @return {?}\n         */\n            function (value) {\n                /** @type {?} */\n                var recalculateDimension = false;\n                if (!this.alwaysHide &&\n                    (ValueHelper.isNullOrUndefined(this.value) ||\n                        this.value.length !== value.length ||\n                        (this.value.length > 0 && this.dimension === 0))) {\n                    recalculateDimension = true;\n                }\n                this._value = value;\n                this.elemRef.nativeElement.innerHTML = value;\n                // Update dimension only when length of the label have changed\n                if (recalculateDimension) {\n                    this.calculateDimension();\n                }\n            };\n        SliderLabelDirective.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[ngxSliderLabel]'\n                    },] },\n        ];\n        /** @nocollapse */\n        SliderLabelDirective.ctorParameters = function () {\n            return [\n                { type: core.ElementRef },\n                { type: core.Renderer2 },\n                { type: core.ChangeDetectorRef }\n            ];\n        };\n        return SliderLabelDirective;\n    }(SliderElementDirective));\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    var Tick = /** @class */ (function () {\n        function Tick() {\n            this.selected = false;\n            this.style = {};\n            this.tooltip = null;\n            this.tooltipPlacement = null;\n            this.value = null;\n            this.valueTooltip = null;\n            this.valueTooltipPlacement = null;\n            this.legend = null;\n        }\n        return Tick;\n    }());\n    var Dragging = /** @class */ (function () {\n        function Dragging() {\n            this.active = false;\n            this.value = 0;\n            this.difference = 0;\n            this.position = 0;\n            this.lowLimit = 0;\n            this.highLimit = 0;\n        }\n        return Dragging;\n    }());\n    var ModelValues = /** @class */ (function () {\n        function ModelValues() {\n        }\n        /**\n         * @param {?=} x\n         * @param {?=} y\n         * @return {?}\n         */\n        ModelValues.compare = /**\n         * @param {?=} x\n         * @param {?=} y\n         * @return {?}\n         */\n            function (x, y) {\n                if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n                    return false;\n                }\n                if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n                    return false;\n                }\n                return x.value === y.value && x.highValue === y.highValue;\n            };\n        return ModelValues;\n    }());\n    var ModelChange = /** @class */ (function (_super) {\n        __extends(ModelChange, _super);\n        function ModelChange() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * @param {?=} x\n         * @param {?=} y\n         * @return {?}\n         */\n        ModelChange.compare = /**\n         * @param {?=} x\n         * @param {?=} y\n         * @return {?}\n         */\n            function (x, y) {\n                if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n                    return false;\n                }\n                if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n                    return false;\n                }\n                return x.value === y.value &&\n                    x.highValue === y.highValue &&\n                    x.forceChange === y.forceChange;\n            };\n        return ModelChange;\n    }(ModelValues));\n    var InputModelChange = /** @class */ (function (_super) {\n        __extends(InputModelChange, _super);\n        function InputModelChange() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return InputModelChange;\n    }(ModelChange));\n    var OutputModelChange = /** @class */ (function (_super) {\n        __extends(OutputModelChange, _super);\n        function OutputModelChange() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return OutputModelChange;\n    }(ModelChange));\n    /** @type {?} */\n    var NGX_SLIDER_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        /* tslint:disable-next-line: no-use-before-declare */\n        useExisting: core.forwardRef(function () { return SliderComponent; }),\n        multi: true,\n    };\n    var SliderComponent = /** @class */ (function () {\n        function SliderComponent(renderer, elementRef, changeDetectionRef, zone) {\n            this.renderer = renderer;\n            this.elementRef = elementRef;\n            this.changeDetectionRef = changeDetectionRef;\n            this.zone = zone;\n            // Model for low value of slider. For simple slider, this is the only input. For range slider, this is the low value.\n            this.value = null;\n            // Output for low value slider to support two-way bindings\n            this.valueChange = new core.EventEmitter();\n            // Model for high value of slider. Not used in simple slider. For range slider, this is the high value.\n            this.highValue = null;\n            // Output for high value slider to support two-way bindings\n            this.highValueChange = new core.EventEmitter();\n            // An object with all the other options of the slider.\n            // Each option can be updated at runtime and the slider will automatically be re-rendered.\n            this.options = new Options();\n            // Event emitted when user starts interaction with the slider\n            this.userChangeStart = new core.EventEmitter();\n            // Event emitted on each change coming from user interaction\n            this.userChange = new core.EventEmitter();\n            // Event emitted when user finishes interaction with the slider\n            this.userChangeEnd = new core.EventEmitter();\n            this.initHasRun = false;\n            this.inputModelChangeSubject = new rxjs.Subject();\n            this.inputModelChangeSubscription = null;\n            this.outputModelChangeSubject = new rxjs.Subject();\n            this.outputModelChangeSubscription = null;\n            this.viewLowValue = null;\n            this.viewHighValue = null;\n            this.viewOptions = new Options();\n            this.handleHalfDimension = 0;\n            this.maxHandlePosition = 0;\n            this.currentTrackingPointer = null;\n            this.currentFocusPointer = null;\n            this.firstKeyDown = false;\n            this.touchId = null;\n            this.dragging = new Dragging();\n            // Host element class bindings\n            this.sliderElementVerticalClass = false;\n            this.sliderElementAnimateClass = false;\n            this.sliderElementWithLegendClass = false;\n            this.sliderElementDisabledAttr = null;\n            this.sliderElementAriaLabel = 'ngx-slider';\n            this.barStyle = {};\n            this.minPointerStyle = {};\n            this.maxPointerStyle = {};\n            this.fullBarTransparentClass = false;\n            this.selectionBarDraggableClass = false;\n            this.ticksUnderValuesClass = false;\n            this.intermediateTicks = false;\n            this.ticks = [];\n            this.eventListenerHelper = null;\n            this.onMoveEventListener = null;\n            this.onEndEventListener = null;\n            this.moving = false;\n            this.resizeObserver = null;\n            this.onTouchedCallback = null;\n            this.onChangeCallback = null;\n            this.eventListenerHelper = new EventListenerHelper(this.renderer);\n        }\n        Object.defineProperty(SliderComponent.prototype, \"manualRefresh\", {\n            // Input event that triggers slider refresh (re-positioning of slider elements)\n            set: /**\n             * @param {?} manualRefresh\n             * @return {?}\n             */ function (manualRefresh) {\n                var _this = this;\n                this.unsubscribeManualRefresh();\n                this.manualRefreshSubscription = manualRefresh.subscribe(function () {\n                    setTimeout(function () { return _this.calculateViewDimensionsAndDetectChanges(); });\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderComponent.prototype, \"triggerFocus\", {\n            // Input event that triggers setting focus on given slider handle\n            set: /**\n             * @param {?} triggerFocus\n             * @return {?}\n             */ function (triggerFocus) {\n                var _this = this;\n                this.unsubscribeTriggerFocus();\n                this.triggerFocusSubscription = triggerFocus.subscribe(function (pointerType) {\n                    _this.focusPointer(pointerType);\n                });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderComponent.prototype, \"range\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return !ValueHelper.isNullOrUndefined(this.value) && !ValueHelper.isNullOrUndefined(this.highValue);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SliderComponent.prototype, \"showTicks\", {\n            get: /**\n             * @return {?}\n             */ function () {\n                return this.viewOptions.showTicks;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n            function () {\n                this.viewOptions = new Options();\n                Object.assign(this.viewOptions, this.options);\n                // We need to run these two things first, before the rest of the init in ngAfterViewInit(),\n                // because these two settings are set through @HostBinding and Angular change detection\n                // mechanism doesn't like them changing in ngAfterViewInit()\n                this.updateDisabledState();\n                this.updateVerticalState();\n                this.updateAriaLabel();\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.ngAfterViewInit = /**\n         * @return {?}\n         */\n            function () {\n                this.applyOptions();\n                this.subscribeInputModelChangeSubject();\n                this.subscribeOutputModelChangeSubject();\n                // Once we apply options, we need to normalise model values for the first time\n                this.renormaliseModelValues();\n                this.viewLowValue = this.modelValueToViewValue(this.value);\n                if (this.range) {\n                    this.viewHighValue = this.modelValueToViewValue(this.highValue);\n                }\n                else {\n                    this.viewHighValue = null;\n                }\n                this.updateVerticalState(); // need to run this again to cover changes to slider elements\n                this.manageElementsStyle();\n                this.updateDisabledState();\n                this.calculateViewDimensions();\n                this.addAccessibility();\n                this.updateCeilLabel();\n                this.updateFloorLabel();\n                this.initHandles();\n                this.manageEventsBindings();\n                this.updateAriaLabel();\n                this.subscribeResizeObserver();\n                this.initHasRun = true;\n                // Run change detection manually to resolve some issues when init procedure changes values used in the view\n                if (!this.isRefDestroyed()) {\n                    this.changeDetectionRef.detectChanges();\n                }\n            };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        SliderComponent.prototype.ngOnChanges = /**\n         * @param {?} changes\n         * @return {?}\n         */\n            function (changes) {\n                // Always apply options first\n                if (!ValueHelper.isNullOrUndefined(changes[\"options\"]) &&\n                    JSON.stringify(changes[\"options\"].previousValue) !== JSON.stringify(changes[\"options\"].currentValue)) {\n                    this.onChangeOptions();\n                }\n                // Then value changes\n                if (!ValueHelper.isNullOrUndefined(changes[\"value\"]) ||\n                    !ValueHelper.isNullOrUndefined(changes[\"highValue\"])) {\n                    this.inputModelChangeSubject.next({\n                        value: this.value,\n                        highValue: this.highValue,\n                        forceChange: false,\n                        internalChange: false\n                    });\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n            function () {\n                this.unbindEvents();\n                this.unsubscribeResizeObserver();\n                this.unsubscribeInputModelChangeSubject();\n                this.unsubscribeOutputModelChangeSubject();\n                this.unsubscribeManualRefresh();\n                this.unsubscribeTriggerFocus();\n            };\n        /**\n         * @param {?} obj\n         * @return {?}\n         */\n        SliderComponent.prototype.writeValue = /**\n         * @param {?} obj\n         * @return {?}\n         */\n            function (obj) {\n                if (obj instanceof Array) {\n                    this.value = obj[0];\n                    this.highValue = obj[1];\n                }\n                else {\n                    this.value = obj;\n                }\n                // ngOnChanges() is not called in this instance, so we need to communicate the change manually\n                this.inputModelChangeSubject.next({\n                    value: this.value,\n                    highValue: this.highValue,\n                    forceChange: false,\n                    internalChange: false\n                });\n            };\n        /**\n         * @param {?} onChangeCallback\n         * @return {?}\n         */\n        SliderComponent.prototype.registerOnChange = /**\n         * @param {?} onChangeCallback\n         * @return {?}\n         */\n            function (onChangeCallback) {\n                this.onChangeCallback = onChangeCallback;\n            };\n        /**\n         * @param {?} onTouchedCallback\n         * @return {?}\n         */\n        SliderComponent.prototype.registerOnTouched = /**\n         * @param {?} onTouchedCallback\n         * @return {?}\n         */\n            function (onTouchedCallback) {\n                this.onTouchedCallback = onTouchedCallback;\n            };\n        /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        SliderComponent.prototype.setDisabledState = /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n            function (isDisabled) {\n                this.viewOptions.disabled = isDisabled;\n                this.updateDisabledState();\n            };\n        /**\n         * @param {?} ariaLabel\n         * @return {?}\n         */\n        SliderComponent.prototype.setAriaLabel = /**\n         * @param {?} ariaLabel\n         * @return {?}\n         */\n            function (ariaLabel) {\n                this.viewOptions.ariaLabel = ariaLabel;\n                this.updateAriaLabel();\n            };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        SliderComponent.prototype.onResize = /**\n         * @param {?} event\n         * @return {?}\n         */\n            function (event) {\n                this.calculateViewDimensionsAndDetectChanges();\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.subscribeInputModelChangeSubject = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                this.inputModelChangeSubscription = this.inputModelChangeSubject\n                    .pipe(operators.distinctUntilChanged(ModelChange.compare), \n                // Hack to reset the status of the distinctUntilChanged() - if a \"fake\" event comes through with forceChange=true,\n                // we forcefully by-pass distinctUntilChanged(), but otherwise drop the event\n                operators.filter(function (modelChange) { return !modelChange.forceChange && !modelChange.internalChange; }))\n                    .subscribe(function (modelChange) { return _this.applyInputModelChange(modelChange); });\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.subscribeOutputModelChangeSubject = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                this.outputModelChangeSubscription = this.outputModelChangeSubject\n                    .pipe(operators.distinctUntilChanged(ModelChange.compare))\n                    .subscribe(function (modelChange) { return _this.publishOutputModelChange(modelChange); });\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.subscribeResizeObserver = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                if (CompatibilityHelper.isResizeObserverAvailable()) {\n                    this.resizeObserver = new ResizeObserver(function () { return _this.calculateViewDimensionsAndDetectChanges(); });\n                    this.resizeObserver.observe(this.elementRef.nativeElement);\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unsubscribeResizeObserver = /**\n         * @return {?}\n         */\n            function () {\n                if (CompatibilityHelper.isResizeObserverAvailable() && this.resizeObserver !== null) {\n                    this.resizeObserver.disconnect();\n                    this.resizeObserver = null;\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unsubscribeOnMove = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.onMoveEventListener)) {\n                    this.eventListenerHelper.detachEventListener(this.onMoveEventListener);\n                    this.onMoveEventListener = null;\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unsubscribeOnEnd = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.onEndEventListener)) {\n                    this.eventListenerHelper.detachEventListener(this.onEndEventListener);\n                    this.onEndEventListener = null;\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unsubscribeInputModelChangeSubject = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.inputModelChangeSubscription)) {\n                    this.inputModelChangeSubscription.unsubscribe();\n                    this.inputModelChangeSubscription = null;\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unsubscribeOutputModelChangeSubject = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.outputModelChangeSubscription)) {\n                    this.outputModelChangeSubscription.unsubscribe();\n                    this.outputModelChangeSubscription = null;\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unsubscribeManualRefresh = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.manualRefreshSubscription)) {\n                    this.manualRefreshSubscription.unsubscribe();\n                    this.manualRefreshSubscription = null;\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unsubscribeTriggerFocus = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.triggerFocusSubscription)) {\n                    this.triggerFocusSubscription.unsubscribe();\n                    this.triggerFocusSubscription = null;\n                }\n            };\n        /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n        SliderComponent.prototype.getPointerElement = /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n            function (pointerType) {\n                if (pointerType === PointerType.Min) {\n                    return this.minHandleElement;\n                }\n                else if (pointerType === PointerType.Max) {\n                    return this.maxHandleElement;\n                }\n                return null;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.getCurrentTrackingValue = /**\n         * @return {?}\n         */\n            function () {\n                if (this.currentTrackingPointer === PointerType.Min) {\n                    return this.viewLowValue;\n                }\n                else if (this.currentTrackingPointer === PointerType.Max) {\n                    return this.viewHighValue;\n                }\n                return null;\n            };\n        /**\n         * @param {?} modelValue\n         * @return {?}\n         */\n        SliderComponent.prototype.modelValueToViewValue = /**\n         * @param {?} modelValue\n         * @return {?}\n         */\n            function (modelValue) {\n                if (ValueHelper.isNullOrUndefined(modelValue)) {\n                    return NaN;\n                }\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n                    return ValueHelper.findStepIndex(+modelValue, this.viewOptions.stepsArray);\n                }\n                return +modelValue;\n            };\n        /**\n         * @param {?} viewValue\n         * @return {?}\n         */\n        SliderComponent.prototype.viewValueToModelValue = /**\n         * @param {?} viewValue\n         * @return {?}\n         */\n            function (viewValue) {\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n                    return this.getStepValue(viewValue);\n                }\n                return viewValue;\n            };\n        /**\n         * @param {?} sliderValue\n         * @return {?}\n         */\n        SliderComponent.prototype.getStepValue = /**\n         * @param {?} sliderValue\n         * @return {?}\n         */\n            function (sliderValue) {\n                /** @type {?} */\n                var step = this.viewOptions.stepsArray[sliderValue];\n                return (!ValueHelper.isNullOrUndefined(step)) ? step.value : NaN;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.applyViewChange = /**\n         * @return {?}\n         */\n            function () {\n                this.value = this.viewValueToModelValue(this.viewLowValue);\n                if (this.range) {\n                    this.highValue = this.viewValueToModelValue(this.viewHighValue);\n                }\n                this.outputModelChangeSubject.next({\n                    value: this.value,\n                    highValue: this.highValue,\n                    userEventInitiated: true,\n                    forceChange: false\n                });\n                // At this point all changes are applied and outputs are emitted, so we should be done.\n                // However, input changes are communicated in different stream and we need to be ready to\n                // act on the next input change even if it is exactly the same as last input change.\n                // Therefore, we send a special event to reset the stream.\n                this.inputModelChangeSubject.next({\n                    value: this.value,\n                    highValue: this.highValue,\n                    forceChange: false,\n                    internalChange: true\n                });\n            };\n        /**\n         * @param {?} modelChange\n         * @return {?}\n         */\n        SliderComponent.prototype.applyInputModelChange = /**\n         * @param {?} modelChange\n         * @return {?}\n         */\n            function (modelChange) {\n                /** @type {?} */\n                var normalisedModelChange = this.normaliseModelValues(modelChange);\n                /** @type {?} */\n                var normalisationChange = !ModelValues.compare(modelChange, normalisedModelChange);\n                if (normalisationChange) {\n                    this.value = normalisedModelChange.value;\n                    this.highValue = normalisedModelChange.highValue;\n                }\n                this.viewLowValue = this.modelValueToViewValue(normalisedModelChange.value);\n                if (this.range) {\n                    this.viewHighValue = this.modelValueToViewValue(normalisedModelChange.highValue);\n                }\n                else {\n                    this.viewHighValue = null;\n                }\n                this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n                if (this.range) {\n                    this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n                }\n                this.updateSelectionBar();\n                this.updateTicksScale();\n                this.updateAriaAttributes();\n                if (this.range) {\n                    this.updateCombinedLabel();\n                }\n                // At the end, we need to communicate the model change to the outputs as well\n                // Normalisation changes are also always forced out to ensure that subscribers always end up in correct state\n                this.outputModelChangeSubject.next({\n                    value: normalisedModelChange.value,\n                    highValue: normalisedModelChange.highValue,\n                    forceChange: normalisationChange,\n                    userEventInitiated: false\n                });\n            };\n        /**\n         * @param {?} modelChange\n         * @return {?}\n         */\n        SliderComponent.prototype.publishOutputModelChange = /**\n         * @param {?} modelChange\n         * @return {?}\n         */\n            function (modelChange) {\n                var _this = this;\n                /** @type {?} */\n                var emitOutputs = function () {\n                    _this.valueChange.emit(modelChange.value);\n                    if (_this.range) {\n                        _this.highValueChange.emit(modelChange.highValue);\n                    }\n                    if (!ValueHelper.isNullOrUndefined(_this.onChangeCallback)) {\n                        if (_this.range) {\n                            _this.onChangeCallback([modelChange.value, modelChange.highValue]);\n                        }\n                        else {\n                            _this.onChangeCallback(modelChange.value);\n                        }\n                    }\n                    if (!ValueHelper.isNullOrUndefined(_this.onTouchedCallback)) {\n                        if (_this.range) {\n                            _this.onTouchedCallback([modelChange.value, modelChange.highValue]);\n                        }\n                        else {\n                            _this.onTouchedCallback(modelChange.value);\n                        }\n                    }\n                };\n                if (modelChange.userEventInitiated) {\n                    // If this change was initiated by a user event, we can emit outputs in the same tick\n                    emitOutputs();\n                    this.userChange.emit(this.getChangeContext());\n                }\n                else {\n                    // But, if the change was initated by something else like a change in input bindings,\n                    // we need to wait until next tick to emit the outputs to keep Angular change detection happy\n                    setTimeout(function () { emitOutputs(); });\n                }\n            };\n        /**\n         * @param {?} input\n         * @return {?}\n         */\n        SliderComponent.prototype.normaliseModelValues = /**\n         * @param {?} input\n         * @return {?}\n         */\n            function (input) {\n                /** @type {?} */\n                var normalisedInput = new ModelValues();\n                normalisedInput.value = input.value;\n                normalisedInput.highValue = input.highValue;\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n                    // When using steps array, only round to nearest step in the array\n                    // No other enforcement can be done, as the step array may be out of order, and that is perfectly fine\n                    if (this.viewOptions.enforceStepsArray) {\n                        /** @type {?} */\n                        var valueIndex = ValueHelper.findStepIndex(normalisedInput.value, this.viewOptions.stepsArray);\n                        normalisedInput.value = this.viewOptions.stepsArray[valueIndex].value;\n                        if (this.range) {\n                            /** @type {?} */\n                            var highValueIndex = ValueHelper.findStepIndex(normalisedInput.highValue, this.viewOptions.stepsArray);\n                            normalisedInput.highValue = this.viewOptions.stepsArray[highValueIndex].value;\n                        }\n                    }\n                    return normalisedInput;\n                }\n                if (this.viewOptions.enforceStep) {\n                    normalisedInput.value = this.roundStep(normalisedInput.value);\n                    if (this.range) {\n                        normalisedInput.highValue = this.roundStep(normalisedInput.highValue);\n                    }\n                }\n                if (this.viewOptions.enforceRange) {\n                    normalisedInput.value = MathHelper.clampToRange(normalisedInput.value, this.viewOptions.floor, this.viewOptions.ceil);\n                    if (this.range) {\n                        normalisedInput.highValue = MathHelper.clampToRange(normalisedInput.highValue, this.viewOptions.floor, this.viewOptions.ceil);\n                    }\n                    // Make sure that range slider invariant (value <= highValue) is always satisfied\n                    if (this.range && input.value > input.highValue) {\n                        // We know that both values are now clamped correctly, they may just be in the wrong order\n                        // So the easy solution is to swap them... except swapping is sometimes disabled in options, so we make the two values the same\n                        if (this.viewOptions.noSwitching) {\n                            normalisedInput.value = normalisedInput.highValue;\n                        }\n                        else {\n                            /** @type {?} */\n                            var tempValue = input.value;\n                            normalisedInput.value = input.highValue;\n                            normalisedInput.highValue = tempValue;\n                        }\n                    }\n                }\n                return normalisedInput;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.renormaliseModelValues = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var previousModelValues = {\n                    value: this.value,\n                    highValue: this.highValue\n                };\n                /** @type {?} */\n                var normalisedModelValues = this.normaliseModelValues(previousModelValues);\n                if (!ModelValues.compare(normalisedModelValues, previousModelValues)) {\n                    this.value = normalisedModelValues.value;\n                    this.highValue = normalisedModelValues.highValue;\n                    this.outputModelChangeSubject.next({\n                        value: this.value,\n                        highValue: this.highValue,\n                        forceChange: true,\n                        userEventInitiated: false\n                    });\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.onChangeOptions = /**\n         * @return {?}\n         */\n            function () {\n                if (!this.initHasRun) {\n                    return;\n                }\n                /** @type {?} */\n                var previousOptionsInfluencingEventBindings = this.getOptionsInfluencingEventBindings(this.viewOptions);\n                this.applyOptions();\n                /** @type {?} */\n                var newOptionsInfluencingEventBindings = this.getOptionsInfluencingEventBindings(this.viewOptions);\n                /** @type {?} */\n                var rebindEvents = !ValueHelper.areArraysEqual(previousOptionsInfluencingEventBindings, newOptionsInfluencingEventBindings);\n                // With new options, we need to re-normalise model values if necessary\n                this.renormaliseModelValues();\n                this.viewLowValue = this.modelValueToViewValue(this.value);\n                if (this.range) {\n                    this.viewHighValue = this.modelValueToViewValue(this.highValue);\n                }\n                else {\n                    this.viewHighValue = null;\n                }\n                this.resetSlider(rebindEvents);\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.applyOptions = /**\n         * @return {?}\n         */\n            function () {\n                this.viewOptions = new Options();\n                Object.assign(this.viewOptions, this.options);\n                this.viewOptions.draggableRange = this.range && this.viewOptions.draggableRange;\n                this.viewOptions.draggableRangeOnly = this.range && this.viewOptions.draggableRangeOnly;\n                if (this.viewOptions.draggableRangeOnly) {\n                    this.viewOptions.draggableRange = true;\n                }\n                this.viewOptions.showTicks = this.viewOptions.showTicks ||\n                    this.viewOptions.showTicksValues ||\n                    !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray);\n                if (this.viewOptions.showTicks &&\n                    (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) || !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray))) {\n                    this.intermediateTicks = true;\n                }\n                this.viewOptions.showSelectionBar = this.viewOptions.showSelectionBar ||\n                    this.viewOptions.showSelectionBarEnd ||\n                    !ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue);\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n                    this.applyStepsArrayOptions();\n                }\n                else {\n                    this.applyFloorCeilOptions();\n                }\n                if (ValueHelper.isNullOrUndefined(this.viewOptions.combineLabels)) {\n                    this.viewOptions.combineLabels = function (minValue, maxValue) {\n                        return minValue + ' - ' + maxValue;\n                    };\n                }\n                if (this.viewOptions.logScale && this.viewOptions.floor === 0) {\n                    throw Error('Can\\'t use floor=0 with logarithmic scale');\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.applyStepsArrayOptions = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                this.viewOptions.floor = 0;\n                this.viewOptions.ceil = this.viewOptions.stepsArray.length - 1;\n                this.viewOptions.step = 1;\n                if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n                    this.viewOptions.translate = function (modelValue) {\n                        if (_this.viewOptions.bindIndexForStepsArray) {\n                            return String(_this.getStepValue(modelValue));\n                        }\n                        return String(modelValue);\n                    };\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.applyFloorCeilOptions = /**\n         * @return {?}\n         */\n            function () {\n                if (ValueHelper.isNullOrUndefined(this.viewOptions.step)) {\n                    this.viewOptions.step = 1;\n                }\n                else {\n                    this.viewOptions.step = +this.viewOptions.step;\n                    if (this.viewOptions.step <= 0) {\n                        this.viewOptions.step = 1;\n                    }\n                }\n                if (ValueHelper.isNullOrUndefined(this.viewOptions.ceil) ||\n                    ValueHelper.isNullOrUndefined(this.viewOptions.floor)) {\n                    throw Error('floor and ceil options must be supplied');\n                }\n                this.viewOptions.ceil = +this.viewOptions.ceil;\n                this.viewOptions.floor = +this.viewOptions.floor;\n                if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n                    this.viewOptions.translate = function (value) { return String(value); };\n                }\n            };\n        /**\n         * @param {?=} rebindEvents\n         * @return {?}\n         */\n        SliderComponent.prototype.resetSlider = /**\n         * @param {?=} rebindEvents\n         * @return {?}\n         */\n            function (rebindEvents) {\n                if (rebindEvents === void 0) {\n                    rebindEvents = true;\n                }\n                this.manageElementsStyle();\n                this.addAccessibility();\n                this.updateCeilLabel();\n                this.updateFloorLabel();\n                if (rebindEvents) {\n                    this.unbindEvents();\n                    this.manageEventsBindings();\n                }\n                this.updateDisabledState();\n                this.updateAriaLabel();\n                this.calculateViewDimensions();\n                this.refocusPointerIfNeeded();\n            };\n        /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n        SliderComponent.prototype.focusPointer = /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n            function (pointerType) {\n                // If not supplied, use min pointer as default\n                if (pointerType !== PointerType.Min && pointerType !== PointerType.Max) {\n                    pointerType = PointerType.Min;\n                }\n                if (pointerType === PointerType.Min) {\n                    this.minHandleElement.focus();\n                }\n                else if (this.range && pointerType === PointerType.Max) {\n                    this.maxHandleElement.focus();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.refocusPointerIfNeeded = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.currentFocusPointer)) {\n                    this.onPointerFocus(this.currentFocusPointer);\n                    /** @type {?} */\n                    var element = this.getPointerElement(this.currentFocusPointer);\n                    element.focus();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.manageElementsStyle = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                this.updateScale();\n                this.floorLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n                this.ceilLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n                /** @type {?} */\n                var hideLabelsForTicks = this.viewOptions.showTicksValues && !this.intermediateTicks;\n                this.minHandleLabelElement.setAlwaysHide(hideLabelsForTicks || this.viewOptions.hidePointerLabels);\n                this.maxHandleLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n                this.combinedLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n                this.selectionBarElement.setAlwaysHide(!this.range && !this.viewOptions.showSelectionBar);\n                this.leftOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n                this.rightOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n                this.fullBarTransparentClass = this.range && this.viewOptions.showOuterSelectionBars;\n                this.selectionBarDraggableClass = this.viewOptions.draggableRange && !this.viewOptions.onlyBindHandles;\n                this.ticksUnderValuesClass = this.intermediateTicks && this.options.showTicksValues;\n                if (this.sliderElementVerticalClass !== this.viewOptions.vertical) {\n                    this.updateVerticalState();\n                    // The above change in host component class will not be applied until the end of this cycle\n                    // However, functions calculating the slider position expect the slider to be already styled as vertical\n                    // So as a workaround, we need to reset the slider once again to compute the correct values\n                    setTimeout(function () { _this.resetSlider(); });\n                }\n                // Changing animate class may interfere with slider reset/initialisation, so we should set it separately,\n                // after all is properly set up\n                if (this.sliderElementAnimateClass !== this.viewOptions.animate) {\n                    setTimeout(function () { _this.sliderElementAnimateClass = _this.viewOptions.animate; });\n                }\n                this.updateRotate();\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.manageEventsBindings = /**\n         * @return {?}\n         */\n            function () {\n                if (this.viewOptions.disabled || this.viewOptions.readOnly) {\n                    this.unbindEvents();\n                }\n                else {\n                    this.bindEvents();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateDisabledState = /**\n         * @return {?}\n         */\n            function () {\n                this.sliderElementDisabledAttr = this.viewOptions.disabled ? 'disabled' : null;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateAriaLabel = /**\n         * @return {?}\n         */\n            function () {\n                this.sliderElementAriaLabel = this.viewOptions.ariaLabel || 'nxg-slider';\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateVerticalState = /**\n         * @return {?}\n         */\n            function () {\n                this.sliderElementVerticalClass = this.viewOptions.vertical;\n                try {\n                    for (var _a = __values(this.getAllSliderElements()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                        var element = _b.value;\n                        // This is also called before ngAfterInit, so need to check that view child bindings work\n                        if (!ValueHelper.isNullOrUndefined(element)) {\n                            element.setVertical(this.viewOptions.vertical);\n                        }\n                    }\n                }\n                catch (e_1_1) {\n                    e_1 = { error: e_1_1 };\n                }\n                finally {\n                    try {\n                        if (_b && !_b.done && (_c = _a.return))\n                            _c.call(_a);\n                    }\n                    finally {\n                        if (e_1)\n                            throw e_1.error;\n                    }\n                }\n                var e_1, _c;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateScale = /**\n         * @return {?}\n         */\n            function () {\n                try {\n                    for (var _a = __values(this.getAllSliderElements()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                        var element = _b.value;\n                        element.setScale(this.viewOptions.scale);\n                    }\n                }\n                catch (e_2_1) {\n                    e_2 = { error: e_2_1 };\n                }\n                finally {\n                    try {\n                        if (_b && !_b.done && (_c = _a.return))\n                            _c.call(_a);\n                    }\n                    finally {\n                        if (e_2)\n                            throw e_2.error;\n                    }\n                }\n                var e_2, _c;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateRotate = /**\n         * @return {?}\n         */\n            function () {\n                try {\n                    for (var _a = __values(this.getAllSliderElements()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                        var element = _b.value;\n                        element.setRotate(this.viewOptions.rotate);\n                    }\n                }\n                catch (e_3_1) {\n                    e_3 = { error: e_3_1 };\n                }\n                finally {\n                    try {\n                        if (_b && !_b.done && (_c = _a.return))\n                            _c.call(_a);\n                    }\n                    finally {\n                        if (e_3)\n                            throw e_3.error;\n                    }\n                }\n                var e_3, _c;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.getAllSliderElements = /**\n         * @return {?}\n         */\n            function () {\n                return [this.leftOuterSelectionBarElement,\n                    this.rightOuterSelectionBarElement,\n                    this.fullBarElement,\n                    this.selectionBarElement,\n                    this.minHandleElement,\n                    this.maxHandleElement,\n                    this.floorLabelElement,\n                    this.ceilLabelElement,\n                    this.minHandleLabelElement,\n                    this.maxHandleLabelElement,\n                    this.combinedLabelElement,\n                    this.ticksElement\n                ];\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.initHandles = /**\n         * @return {?}\n         */\n            function () {\n                this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n                /*\n                   the order here is important since the selection bar should be\n                   updated after the high handle but before the combined label\n                   */\n                if (this.range) {\n                    this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n                }\n                this.updateSelectionBar();\n                if (this.range) {\n                    this.updateCombinedLabel();\n                }\n                this.updateTicksScale();\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.addAccessibility = /**\n         * @return {?}\n         */\n            function () {\n                this.updateAriaAttributes();\n                this.minHandleElement.role = 'slider';\n                if (this.viewOptions.keyboardSupport &&\n                    !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n                    this.minHandleElement.tabindex = '0';\n                }\n                else {\n                    this.minHandleElement.tabindex = '';\n                }\n                this.minHandleElement.ariaOrientation = (this.viewOptions.vertical || this.viewOptions.rotate !== 0) ? 'vertical' : 'horizontal';\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabel)) {\n                    this.minHandleElement.ariaLabel = this.viewOptions.ariaLabel;\n                }\n                else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledBy)) {\n                    this.minHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledBy;\n                }\n                if (this.range) {\n                    this.maxHandleElement.role = 'slider';\n                    if (this.viewOptions.keyboardSupport &&\n                        !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n                        this.maxHandleElement.tabindex = '0';\n                    }\n                    else {\n                        this.maxHandleElement.tabindex = '';\n                    }\n                    this.maxHandleElement.ariaOrientation = (this.viewOptions.vertical || this.viewOptions.rotate !== 0) ? 'vertical' : 'horizontal';\n                    if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelHigh)) {\n                        this.maxHandleElement.ariaLabel = this.viewOptions.ariaLabelHigh;\n                    }\n                    else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledByHigh)) {\n                        this.maxHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledByHigh;\n                    }\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateAriaAttributes = /**\n         * @return {?}\n         */\n            function () {\n                this.minHandleElement.ariaValueNow = (+this.value).toString();\n                this.minHandleElement.ariaValueText = this.viewOptions.translate(+this.value, LabelType.Low);\n                this.minHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n                this.minHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n                if (this.range) {\n                    this.maxHandleElement.ariaValueNow = (+this.highValue).toString();\n                    this.maxHandleElement.ariaValueText = this.viewOptions.translate(+this.highValue, LabelType.High);\n                    this.maxHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n                    this.maxHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.calculateViewDimensions = /**\n         * @return {?}\n         */\n            function () {\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.handleDimension)) {\n                    this.minHandleElement.setDimension(this.viewOptions.handleDimension);\n                }\n                else {\n                    this.minHandleElement.calculateDimension();\n                }\n                /** @type {?} */\n                var handleWidth = this.minHandleElement.dimension;\n                this.handleHalfDimension = handleWidth / 2;\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.barDimension)) {\n                    this.fullBarElement.setDimension(this.viewOptions.barDimension);\n                }\n                else {\n                    this.fullBarElement.calculateDimension();\n                }\n                this.maxHandlePosition = this.fullBarElement.dimension - handleWidth;\n                if (this.initHasRun) {\n                    this.updateFloorLabel();\n                    this.updateCeilLabel();\n                    this.initHandles();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.calculateViewDimensionsAndDetectChanges = /**\n         * @return {?}\n         */\n            function () {\n                this.calculateViewDimensions();\n                if (!this.isRefDestroyed()) {\n                    this.changeDetectionRef.detectChanges();\n                }\n            };\n        /**\n         * If the slider reference is already destroyed\n         * @return {?} boolean - true if ref is destroyed\n         */\n        SliderComponent.prototype.isRefDestroyed = /**\n         * If the slider reference is already destroyed\n         * @return {?} boolean - true if ref is destroyed\n         */\n            function () {\n                return this.changeDetectionRef['destroyed'];\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateTicksScale = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                if (!this.viewOptions.showTicks) {\n                    setTimeout(function () { _this.sliderElementWithLegendClass = false; });\n                    return;\n                }\n                /** @type {?} */\n                var ticksArray = !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray)\n                    ? this.viewOptions.ticksArray\n                    : this.getTicksArray();\n                /** @type {?} */\n                var translate = this.viewOptions.vertical ? 'translateY' : 'translateX';\n                if (this.viewOptions.rightToLeft) {\n                    ticksArray.reverse();\n                }\n                /** @type {?} */\n                var tickValueStep = !ValueHelper.isNullOrUndefined(this.viewOptions.tickValueStep) ? this.viewOptions.tickValueStep :\n                    (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) ? this.viewOptions.tickStep : this.viewOptions.step);\n                /** @type {?} */\n                var hasAtLeastOneLegend = false;\n                /** @type {?} */\n                var newTicks = ticksArray.map(function (value) {\n                    /** @type {?} */\n                    var position = _this.valueToPosition(value);\n                    if (_this.viewOptions.vertical) {\n                        position = _this.maxHandlePosition - position;\n                    }\n                    /** @type {?} */\n                    var translation = translate + '(' + Math.round(position) + 'px)';\n                    /** @type {?} */\n                    var tick = new Tick();\n                    tick.selected = _this.isTickSelected(value);\n                    tick.style = {\n                        '-webkit-transform': translation,\n                        '-moz-transform': translation,\n                        '-o-transform': translation,\n                        '-ms-transform': translation,\n                        transform: translation,\n                    };\n                    if (tick.selected && !ValueHelper.isNullOrUndefined(_this.viewOptions.getSelectionBarColor)) {\n                        tick.style['background-color'] = _this.getSelectionBarColor();\n                    }\n                    if (!tick.selected && !ValueHelper.isNullOrUndefined(_this.viewOptions.getTickColor)) {\n                        tick.style['background-color'] = _this.getTickColor(value);\n                    }\n                    if (!ValueHelper.isNullOrUndefined(_this.viewOptions.ticksTooltip)) {\n                        tick.tooltip = _this.viewOptions.ticksTooltip(value);\n                        tick.tooltipPlacement = _this.viewOptions.vertical ? 'right' : 'top';\n                    }\n                    if (_this.viewOptions.showTicksValues && !ValueHelper.isNullOrUndefined(tickValueStep) &&\n                        MathHelper.isModuloWithinPrecisionLimit(value, tickValueStep, _this.viewOptions.precisionLimit)) {\n                        tick.value = _this.getDisplayValue(value, LabelType.TickValue);\n                        if (!ValueHelper.isNullOrUndefined(_this.viewOptions.ticksValuesTooltip)) {\n                            tick.valueTooltip = _this.viewOptions.ticksValuesTooltip(value);\n                            tick.valueTooltipPlacement = _this.viewOptions.vertical\n                                ? 'right'\n                                : 'top';\n                        }\n                    }\n                    /** @type {?} */\n                    var legend = null;\n                    if (!ValueHelper.isNullOrUndefined(_this.viewOptions.stepsArray)) {\n                        /** @type {?} */\n                        var step = _this.viewOptions.stepsArray[value];\n                        if (!ValueHelper.isNullOrUndefined(_this.viewOptions.getStepLegend)) {\n                            legend = _this.viewOptions.getStepLegend(step);\n                        }\n                        else if (!ValueHelper.isNullOrUndefined(step)) {\n                            legend = step.legend;\n                        }\n                    }\n                    else if (!ValueHelper.isNullOrUndefined(_this.viewOptions.getLegend)) {\n                        legend = _this.viewOptions.getLegend(value);\n                    }\n                    if (!ValueHelper.isNullOrUndefined(legend)) {\n                        tick.legend = legend;\n                        hasAtLeastOneLegend = true;\n                    }\n                    return tick;\n                });\n                setTimeout(function () { _this.sliderElementWithLegendClass = hasAtLeastOneLegend; });\n                // We should avoid re-creating the ticks array if possible\n                // This both improves performance and makes CSS animations work correctly\n                if (!ValueHelper.isNullOrUndefined(this.ticks) && this.ticks.length === newTicks.length) {\n                    for (var i = 0; i < newTicks.length; ++i) {\n                        Object.assign(this.ticks[i], newTicks[i]);\n                    }\n                }\n                else {\n                    this.ticks = newTicks;\n                }\n                if (!this.isRefDestroyed()) {\n                    this.changeDetectionRef.detectChanges();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.getTicksArray = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var step = (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) ? this.viewOptions.tickStep : this.viewOptions.step;\n                /** @type {?} */\n                var ticksArray = [];\n                /** @type {?} */\n                var numberOfValues = 1 + Math.floor(MathHelper.roundToPrecisionLimit(Math.abs(this.viewOptions.ceil - this.viewOptions.floor) / step, this.viewOptions.precisionLimit));\n                for (var index = 0; index < numberOfValues; ++index) {\n                    ticksArray.push(MathHelper.roundToPrecisionLimit(this.viewOptions.floor + step * index, this.viewOptions.precisionLimit));\n                }\n                return ticksArray;\n            };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SliderComponent.prototype.isTickSelected = /**\n         * @param {?} value\n         * @return {?}\n         */\n            function (value) {\n                if (!this.range) {\n                    if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n                        /** @type {?} */\n                        var center = this.viewOptions.showSelectionBarFromValue;\n                        if (this.viewLowValue > center &&\n                            value >= center &&\n                            value <= this.viewLowValue) {\n                            return true;\n                        }\n                        else if (this.viewLowValue < center &&\n                            value <= center &&\n                            value >= this.viewLowValue) {\n                            return true;\n                        }\n                    }\n                    else if (this.viewOptions.showSelectionBarEnd) {\n                        if (value >= this.viewLowValue) {\n                            return true;\n                        }\n                    }\n                    else if (this.viewOptions.showSelectionBar && value <= this.viewLowValue) {\n                        return true;\n                    }\n                }\n                if (this.range && value >= this.viewLowValue && value <= this.viewHighValue) {\n                    return true;\n                }\n                return false;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateFloorLabel = /**\n         * @return {?}\n         */\n            function () {\n                if (!this.floorLabelElement.alwaysHide) {\n                    this.floorLabelElement.setValue(this.getDisplayValue(this.viewOptions.floor, LabelType.Floor));\n                    this.floorLabelElement.calculateDimension();\n                    /** @type {?} */\n                    var position = this.viewOptions.rightToLeft\n                        ? this.fullBarElement.dimension - this.floorLabelElement.dimension\n                        : 0;\n                    this.floorLabelElement.setPosition(position);\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateCeilLabel = /**\n         * @return {?}\n         */\n            function () {\n                if (!this.ceilLabelElement.alwaysHide) {\n                    this.ceilLabelElement.setValue(this.getDisplayValue(this.viewOptions.ceil, LabelType.Ceil));\n                    this.ceilLabelElement.calculateDimension();\n                    /** @type {?} */\n                    var position = this.viewOptions.rightToLeft\n                        ? 0\n                        : this.fullBarElement.dimension - this.ceilLabelElement.dimension;\n                    this.ceilLabelElement.setPosition(position);\n                }\n            };\n        /**\n         * @param {?} which\n         * @param {?} newPos\n         * @return {?}\n         */\n        SliderComponent.prototype.updateHandles = /**\n         * @param {?} which\n         * @param {?} newPos\n         * @return {?}\n         */\n            function (which, newPos) {\n                if (which === PointerType.Min) {\n                    this.updateLowHandle(newPos);\n                }\n                else if (which === PointerType.Max) {\n                    this.updateHighHandle(newPos);\n                }\n                this.updateSelectionBar();\n                this.updateTicksScale();\n                if (this.range) {\n                    this.updateCombinedLabel();\n                }\n            };\n        /**\n         * @param {?} labelType\n         * @param {?} newPos\n         * @return {?}\n         */\n        SliderComponent.prototype.getHandleLabelPos = /**\n         * @param {?} labelType\n         * @param {?} newPos\n         * @return {?}\n         */\n            function (labelType, newPos) {\n                /** @type {?} */\n                var labelDimension = (labelType === PointerType.Min)\n                    ? this.minHandleLabelElement.dimension\n                    : this.maxHandleLabelElement.dimension;\n                /** @type {?} */\n                var nearHandlePos = newPos - labelDimension / 2 + this.handleHalfDimension;\n                /** @type {?} */\n                var endOfBarPos = this.fullBarElement.dimension - labelDimension;\n                if (!this.viewOptions.boundPointerLabels) {\n                    return nearHandlePos;\n                }\n                if ((this.viewOptions.rightToLeft && labelType === PointerType.Min) ||\n                    (!this.viewOptions.rightToLeft && labelType === PointerType.Max)) {\n                    return Math.min(nearHandlePos, endOfBarPos);\n                }\n                else {\n                    return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);\n                }\n            };\n        /**\n         * @param {?} newPos\n         * @return {?}\n         */\n        SliderComponent.prototype.updateLowHandle = /**\n         * @param {?} newPos\n         * @return {?}\n         */\n            function (newPos) {\n                this.minHandleElement.setPosition(newPos);\n                this.minHandleLabelElement.setValue(this.getDisplayValue(this.viewLowValue, LabelType.Low));\n                this.minHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Min, newPos));\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n                    this.minPointerStyle = {\n                        backgroundColor: this.getPointerColor(PointerType.Min),\n                    };\n                }\n                if (this.viewOptions.autoHideLimitLabels) {\n                    this.updateFloorAndCeilLabelsVisibility();\n                }\n            };\n        /**\n         * @param {?} newPos\n         * @return {?}\n         */\n        SliderComponent.prototype.updateHighHandle = /**\n         * @param {?} newPos\n         * @return {?}\n         */\n            function (newPos) {\n                this.maxHandleElement.setPosition(newPos);\n                this.maxHandleLabelElement.setValue(this.getDisplayValue(this.viewHighValue, LabelType.High));\n                this.maxHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Max, newPos));\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n                    this.maxPointerStyle = {\n                        backgroundColor: this.getPointerColor(PointerType.Max),\n                    };\n                }\n                if (this.viewOptions.autoHideLimitLabels) {\n                    this.updateFloorAndCeilLabelsVisibility();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateFloorAndCeilLabelsVisibility = /**\n         * @return {?}\n         */\n            function () {\n                // Show based only on hideLimitLabels if pointer labels are hidden\n                if (this.viewOptions.hidePointerLabels) {\n                    return;\n                }\n                /** @type {?} */\n                var floorLabelHidden = false;\n                /** @type {?} */\n                var ceilLabelHidden = false;\n                /** @type {?} */\n                var isMinLabelAtFloor = this.isLabelBelowFloorLabel(this.minHandleLabelElement);\n                /** @type {?} */\n                var isMinLabelAtCeil = this.isLabelAboveCeilLabel(this.minHandleLabelElement);\n                /** @type {?} */\n                var isMaxLabelAtCeil = this.isLabelAboveCeilLabel(this.maxHandleLabelElement);\n                /** @type {?} */\n                var isCombinedLabelAtFloor = this.isLabelBelowFloorLabel(this.combinedLabelElement);\n                /** @type {?} */\n                var isCombinedLabelAtCeil = this.isLabelAboveCeilLabel(this.combinedLabelElement);\n                if (isMinLabelAtFloor) {\n                    floorLabelHidden = true;\n                    this.floorLabelElement.hide();\n                }\n                else {\n                    floorLabelHidden = false;\n                    this.floorLabelElement.show();\n                }\n                if (isMinLabelAtCeil) {\n                    ceilLabelHidden = true;\n                    this.ceilLabelElement.hide();\n                }\n                else {\n                    ceilLabelHidden = false;\n                    this.ceilLabelElement.show();\n                }\n                if (this.range) {\n                    /** @type {?} */\n                    var hideCeil = this.combinedLabelElement.isVisible() ? isCombinedLabelAtCeil : isMaxLabelAtCeil;\n                    /** @type {?} */\n                    var hideFloor = this.combinedLabelElement.isVisible() ? isCombinedLabelAtFloor : isMinLabelAtFloor;\n                    if (hideCeil) {\n                        this.ceilLabelElement.hide();\n                    }\n                    else if (!ceilLabelHidden) {\n                        this.ceilLabelElement.show();\n                    }\n                    // Hide or show floor label\n                    if (hideFloor) {\n                        this.floorLabelElement.hide();\n                    }\n                    else if (!floorLabelHidden) {\n                        this.floorLabelElement.show();\n                    }\n                }\n            };\n        /**\n         * @param {?} label\n         * @return {?}\n         */\n        SliderComponent.prototype.isLabelBelowFloorLabel = /**\n         * @param {?} label\n         * @return {?}\n         */\n            function (label) {\n                /** @type {?} */\n                var pos = label.position;\n                /** @type {?} */\n                var dim = label.dimension;\n                /** @type {?} */\n                var floorPos = this.floorLabelElement.position;\n                /** @type {?} */\n                var floorDim = this.floorLabelElement.dimension;\n                return this.viewOptions.rightToLeft\n                    ? pos + dim >= floorPos - 2\n                    : pos <= floorPos + floorDim + 2;\n            };\n        /**\n         * @param {?} label\n         * @return {?}\n         */\n        SliderComponent.prototype.isLabelAboveCeilLabel = /**\n         * @param {?} label\n         * @return {?}\n         */\n            function (label) {\n                /** @type {?} */\n                var pos = label.position;\n                /** @type {?} */\n                var dim = label.dimension;\n                /** @type {?} */\n                var ceilPos = this.ceilLabelElement.position;\n                /** @type {?} */\n                var ceilDim = this.ceilLabelElement.dimension;\n                return this.viewOptions.rightToLeft\n                    ? pos <= ceilPos + ceilDim + 2\n                    : pos + dim >= ceilPos - 2;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateSelectionBar = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var position = 0;\n                /** @type {?} */\n                var dimension = 0;\n                /** @type {?} */\n                var isSelectionBarFromRight = this.viewOptions.rightToLeft\n                    ? !this.viewOptions.showSelectionBarEnd\n                    : this.viewOptions.showSelectionBarEnd;\n                /** @type {?} */\n                var positionForRange = this.viewOptions.rightToLeft\n                    ? this.maxHandleElement.position + this.handleHalfDimension\n                    : this.minHandleElement.position + this.handleHalfDimension;\n                if (this.range) {\n                    dimension = Math.abs(this.maxHandleElement.position - this.minHandleElement.position);\n                    position = positionForRange;\n                }\n                else {\n                    if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n                        /** @type {?} */\n                        var center = this.viewOptions.showSelectionBarFromValue;\n                        /** @type {?} */\n                        var centerPosition = this.valueToPosition(center);\n                        /** @type {?} */\n                        var isModelGreaterThanCenter = this.viewOptions.rightToLeft\n                            ? this.viewLowValue <= center\n                            : this.viewLowValue > center;\n                        if (isModelGreaterThanCenter) {\n                            dimension = this.minHandleElement.position - centerPosition;\n                            position = centerPosition + this.handleHalfDimension;\n                        }\n                        else {\n                            dimension = centerPosition - this.minHandleElement.position;\n                            position = this.minHandleElement.position + this.handleHalfDimension;\n                        }\n                    }\n                    else if (isSelectionBarFromRight) {\n                        dimension = Math.ceil(Math.abs(this.maxHandlePosition - this.minHandleElement.position) + this.handleHalfDimension);\n                        position = Math.floor(this.minHandleElement.position + this.handleHalfDimension);\n                    }\n                    else {\n                        dimension = this.minHandleElement.position + this.handleHalfDimension;\n                        position = 0;\n                    }\n                }\n                this.selectionBarElement.setDimension(dimension);\n                this.selectionBarElement.setPosition(position);\n                if (this.range && this.viewOptions.showOuterSelectionBars) {\n                    if (this.viewOptions.rightToLeft) {\n                        this.rightOuterSelectionBarElement.setDimension(position);\n                        this.rightOuterSelectionBarElement.setPosition(0);\n                        this.fullBarElement.calculateDimension();\n                        this.leftOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n                        this.leftOuterSelectionBarElement.setPosition(position + dimension);\n                    }\n                    else {\n                        this.leftOuterSelectionBarElement.setDimension(position);\n                        this.leftOuterSelectionBarElement.setPosition(0);\n                        this.fullBarElement.calculateDimension();\n                        this.rightOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n                        this.rightOuterSelectionBarElement.setPosition(position + dimension);\n                    }\n                }\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n                    /** @type {?} */\n                    var color = this.getSelectionBarColor();\n                    this.barStyle = {\n                        backgroundColor: color,\n                    };\n                }\n                else if (!ValueHelper.isNullOrUndefined(this.viewOptions.selectionBarGradient)) {\n                    /** @type {?} */\n                    var offset = (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue))\n                        ? this.valueToPosition(this.viewOptions.showSelectionBarFromValue)\n                        : 0;\n                    /** @type {?} */\n                    var reversed = (offset - position > 0 && !isSelectionBarFromRight) || (offset - position <= 0 && isSelectionBarFromRight);\n                    /** @type {?} */\n                    var direction = this.viewOptions.vertical\n                        ? reversed ? 'bottom' : 'top'\n                        : reversed ? 'left' : 'right';\n                    this.barStyle = {\n                        backgroundImage: 'linear-gradient(to ' +\n                            direction +\n                            ', ' +\n                            this.viewOptions.selectionBarGradient.from +\n                            ' 0%,' +\n                            this.viewOptions.selectionBarGradient.to +\n                            ' 100%)',\n                    };\n                    if (this.viewOptions.vertical) {\n                        this.barStyle.backgroundPosition =\n                            'center ' +\n                                (offset +\n                                    dimension +\n                                    position +\n                                    (reversed ? -this.handleHalfDimension : 0)) +\n                                'px';\n                        this.barStyle.backgroundSize =\n                            '100% ' + (this.fullBarElement.dimension - this.handleHalfDimension) + 'px';\n                    }\n                    else {\n                        this.barStyle.backgroundPosition =\n                            offset -\n                                position +\n                                (reversed ? this.handleHalfDimension : 0) +\n                                'px center';\n                        this.barStyle.backgroundSize =\n                            this.fullBarElement.dimension - this.handleHalfDimension + 'px 100%';\n                    }\n                }\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.getSelectionBarColor = /**\n         * @return {?}\n         */\n            function () {\n                if (this.range) {\n                    return this.viewOptions.getSelectionBarColor(this.value, this.highValue);\n                }\n                return this.viewOptions.getSelectionBarColor(this.value);\n            };\n        /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n        SliderComponent.prototype.getPointerColor = /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n            function (pointerType) {\n                if (pointerType === PointerType.Max) {\n                    return this.viewOptions.getPointerColor(this.highValue, pointerType);\n                }\n                return this.viewOptions.getPointerColor(this.value, pointerType);\n            };\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        SliderComponent.prototype.getTickColor = /**\n         * @param {?} value\n         * @return {?}\n         */\n            function (value) {\n                return this.viewOptions.getTickColor(value);\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.updateCombinedLabel = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var isLabelOverlap = null;\n                if (this.viewOptions.rightToLeft) {\n                    isLabelOverlap =\n                        this.minHandleLabelElement.position - this.minHandleLabelElement.dimension - 10 <= this.maxHandleLabelElement.position;\n                }\n                else {\n                    isLabelOverlap =\n                        this.minHandleLabelElement.position + this.minHandleLabelElement.dimension + 10 >= this.maxHandleLabelElement.position;\n                }\n                if (isLabelOverlap) {\n                    /** @type {?} */\n                    var lowDisplayValue = this.getDisplayValue(this.viewLowValue, LabelType.Low);\n                    /** @type {?} */\n                    var highDisplayValue = this.getDisplayValue(this.viewHighValue, LabelType.High);\n                    /** @type {?} */\n                    var combinedLabelValue = this.viewOptions.rightToLeft\n                        ? this.viewOptions.combineLabels(highDisplayValue, lowDisplayValue)\n                        : this.viewOptions.combineLabels(lowDisplayValue, highDisplayValue);\n                    this.combinedLabelElement.setValue(combinedLabelValue);\n                    /** @type {?} */\n                    var pos = this.viewOptions.boundPointerLabels\n                        ? Math.min(Math.max(this.selectionBarElement.position +\n                            this.selectionBarElement.dimension / 2 -\n                            this.combinedLabelElement.dimension / 2, 0), this.fullBarElement.dimension - this.combinedLabelElement.dimension)\n                        : this.selectionBarElement.position + this.selectionBarElement.dimension / 2 - this.combinedLabelElement.dimension / 2;\n                    this.combinedLabelElement.setPosition(pos);\n                    this.minHandleLabelElement.hide();\n                    this.maxHandleLabelElement.hide();\n                    this.combinedLabelElement.show();\n                }\n                else {\n                    this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n                    this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n                    this.maxHandleLabelElement.show();\n                    this.minHandleLabelElement.show();\n                    this.combinedLabelElement.hide();\n                }\n                if (this.viewOptions.autoHideLimitLabels) {\n                    this.updateFloorAndCeilLabelsVisibility();\n                }\n            };\n        /**\n         * @param {?} value\n         * @param {?} which\n         * @return {?}\n         */\n        SliderComponent.prototype.getDisplayValue = /**\n         * @param {?} value\n         * @param {?} which\n         * @return {?}\n         */\n            function (value, which) {\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n                    value = this.getStepValue(value);\n                }\n                return this.viewOptions.translate(value, which);\n            };\n        /**\n         * @param {?} value\n         * @param {?=} customStep\n         * @return {?}\n         */\n        SliderComponent.prototype.roundStep = /**\n         * @param {?} value\n         * @param {?=} customStep\n         * @return {?}\n         */\n            function (value, customStep) {\n                /** @type {?} */\n                var step = !ValueHelper.isNullOrUndefined(customStep) ? customStep : this.viewOptions.step;\n                /** @type {?} */\n                var steppedDifference = MathHelper.roundToPrecisionLimit((value - this.viewOptions.floor) / step, this.viewOptions.precisionLimit);\n                steppedDifference = Math.round(steppedDifference) * step;\n                return MathHelper.roundToPrecisionLimit(this.viewOptions.floor + steppedDifference, this.viewOptions.precisionLimit);\n            };\n        /**\n         * @param {?} val\n         * @return {?}\n         */\n        SliderComponent.prototype.valueToPosition = /**\n         * @param {?} val\n         * @return {?}\n         */\n            function (val) {\n                /** @type {?} */\n                var fn = ValueHelper.linearValueToPosition;\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.customValueToPosition)) {\n                    fn = this.viewOptions.customValueToPosition;\n                }\n                else if (this.viewOptions.logScale) {\n                    fn = ValueHelper.logValueToPosition;\n                }\n                val = MathHelper.clampToRange(val, this.viewOptions.floor, this.viewOptions.ceil);\n                /** @type {?} */\n                var percent = fn(val, this.viewOptions.floor, this.viewOptions.ceil);\n                if (ValueHelper.isNullOrUndefined(percent)) {\n                    percent = 0;\n                }\n                if (this.viewOptions.rightToLeft) {\n                    percent = 1 - percent;\n                }\n                return percent * this.maxHandlePosition;\n            };\n        /**\n         * @param {?} position\n         * @return {?}\n         */\n        SliderComponent.prototype.positionToValue = /**\n         * @param {?} position\n         * @return {?}\n         */\n            function (position) {\n                /** @type {?} */\n                var percent = position / this.maxHandlePosition;\n                if (this.viewOptions.rightToLeft) {\n                    percent = 1 - percent;\n                }\n                /** @type {?} */\n                var fn = ValueHelper.linearPositionToValue;\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.customPositionToValue)) {\n                    fn = this.viewOptions.customPositionToValue;\n                }\n                else if (this.viewOptions.logScale) {\n                    fn = ValueHelper.logPositionToValue;\n                }\n                /** @type {?} */\n                var value = fn(percent, this.viewOptions.floor, this.viewOptions.ceil);\n                return !ValueHelper.isNullOrUndefined(value) ? value : 0;\n            };\n        /**\n         * @param {?} event\n         * @param {?=} targetTouchId\n         * @return {?}\n         */\n        SliderComponent.prototype.getEventXY = /**\n         * @param {?} event\n         * @param {?=} targetTouchId\n         * @return {?}\n         */\n            function (event, targetTouchId) {\n                if (event instanceof MouseEvent) {\n                    return (this.viewOptions.vertical || this.viewOptions.rotate !== 0) ? event.clientY : event.clientX;\n                }\n                /** @type {?} */\n                var touchIndex = 0;\n                /** @type {?} */\n                var touches = event.touches;\n                if (!ValueHelper.isNullOrUndefined(targetTouchId)) {\n                    for (var i = 0; i < touches.length; i++) {\n                        if (touches[i].identifier === targetTouchId) {\n                            touchIndex = i;\n                            break;\n                        }\n                    }\n                }\n                // Return the target touch or if the target touch was not found in the event\n                // returns the coordinates of the first touch\n                return (this.viewOptions.vertical || this.viewOptions.rotate !== 0) ? touches[touchIndex].clientY : touches[touchIndex].clientX;\n            };\n        /**\n         * @param {?} event\n         * @param {?=} targetTouchId\n         * @return {?}\n         */\n        SliderComponent.prototype.getEventPosition = /**\n         * @param {?} event\n         * @param {?=} targetTouchId\n         * @return {?}\n         */\n            function (event, targetTouchId) {\n                /** @type {?} */\n                var sliderElementBoundingRect = this.elementRef.nativeElement.getBoundingClientRect();\n                /** @type {?} */\n                var sliderPos = (this.viewOptions.vertical || this.viewOptions.rotate !== 0) ?\n                    sliderElementBoundingRect.bottom : sliderElementBoundingRect.left;\n                /** @type {?} */\n                var eventPos = 0;\n                if (this.viewOptions.vertical || this.viewOptions.rotate !== 0) {\n                    eventPos = -this.getEventXY(event, targetTouchId) + sliderPos;\n                }\n                else {\n                    eventPos = this.getEventXY(event, targetTouchId) - sliderPos;\n                }\n                return eventPos * this.viewOptions.scale - this.handleHalfDimension;\n            };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        SliderComponent.prototype.getNearestHandle = /**\n         * @param {?} event\n         * @return {?}\n         */\n            function (event) {\n                if (!this.range) {\n                    return PointerType.Min;\n                }\n                /** @type {?} */\n                var position = this.getEventPosition(event);\n                /** @type {?} */\n                var distanceMin = Math.abs(position - this.minHandleElement.position);\n                /** @type {?} */\n                var distanceMax = Math.abs(position - this.maxHandleElement.position);\n                if (distanceMin < distanceMax) {\n                    return PointerType.Min;\n                }\n                else if (distanceMin > distanceMax) {\n                    return PointerType.Max;\n                }\n                else if (!this.viewOptions.rightToLeft) {\n                    // if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH\n                    return position < this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n                }\n                // reverse in rtl\n                return position > this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.bindEvents = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                /** @type {?} */\n                var draggableRange = this.viewOptions.draggableRange;\n                if (!this.viewOptions.onlyBindHandles) {\n                    this.selectionBarElement.on('mousedown', function (event) { return _this.onBarStart(null, draggableRange, event, true, true, true); });\n                }\n                if (this.viewOptions.draggableRangeOnly) {\n                    this.minHandleElement.on('mousedown', function (event) { return _this.onBarStart(PointerType.Min, draggableRange, event, true, true); });\n                    this.maxHandleElement.on('mousedown', function (event) { return _this.onBarStart(PointerType.Max, draggableRange, event, true, true); });\n                }\n                else {\n                    this.minHandleElement.on('mousedown', function (event) { return _this.onStart(PointerType.Min, event, true, true); });\n                    if (this.range) {\n                        this.maxHandleElement.on('mousedown', function (event) { return _this.onStart(PointerType.Max, event, true, true); });\n                    }\n                    if (!this.viewOptions.onlyBindHandles) {\n                        this.fullBarElement.on('mousedown', function (event) { return _this.onStart(null, event, true, true, true); });\n                        this.ticksElement.on('mousedown', function (event) { return _this.onStart(null, event, true, true, true, true); });\n                    }\n                }\n                if (!this.viewOptions.onlyBindHandles) {\n                    this.selectionBarElement.onPassive('touchstart', function (event) { return _this.onBarStart(null, draggableRange, event, true, true, true); });\n                }\n                if (this.viewOptions.draggableRangeOnly) {\n                    this.minHandleElement.onPassive('touchstart', function (event) { return _this.onBarStart(PointerType.Min, draggableRange, event, true, true); });\n                    this.maxHandleElement.onPassive('touchstart', function (event) { return _this.onBarStart(PointerType.Max, draggableRange, event, true, true); });\n                }\n                else {\n                    this.minHandleElement.onPassive('touchstart', function (event) { return _this.onStart(PointerType.Min, event, true, true); });\n                    if (this.range) {\n                        this.maxHandleElement.onPassive('touchstart', function (event) { return _this.onStart(PointerType.Max, event, true, true); });\n                    }\n                    if (!this.viewOptions.onlyBindHandles) {\n                        this.fullBarElement.onPassive('touchstart', function (event) { return _this.onStart(null, event, true, true, true); });\n                        this.ticksElement.onPassive('touchstart', function (event) { return _this.onStart(null, event, false, false, true, true); });\n                    }\n                }\n                if (this.viewOptions.keyboardSupport) {\n                    this.minHandleElement.on('focus', function () { return _this.onPointerFocus(PointerType.Min); });\n                    if (this.range) {\n                        this.maxHandleElement.on('focus', function () { return _this.onPointerFocus(PointerType.Max); });\n                    }\n                }\n            };\n        /**\n         * @param {?} options\n         * @return {?}\n         */\n        SliderComponent.prototype.getOptionsInfluencingEventBindings = /**\n         * @param {?} options\n         * @return {?}\n         */\n            function (options) {\n                return [\n                    options.disabled,\n                    options.readOnly,\n                    options.draggableRange,\n                    options.draggableRangeOnly,\n                    options.onlyBindHandles,\n                    options.keyboardSupport\n                ];\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.unbindEvents = /**\n         * @return {?}\n         */\n            function () {\n                this.unsubscribeOnMove();\n                this.unsubscribeOnEnd();\n                try {\n                    for (var _a = __values(this.getAllSliderElements()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                        var element = _b.value;\n                        if (!ValueHelper.isNullOrUndefined(element)) {\n                            element.off();\n                        }\n                    }\n                }\n                catch (e_4_1) {\n                    e_4 = { error: e_4_1 };\n                }\n                finally {\n                    try {\n                        if (_b && !_b.done && (_c = _a.return))\n                            _c.call(_a);\n                    }\n                    finally {\n                        if (e_4)\n                            throw e_4.error;\n                    }\n                }\n                var e_4, _c;\n            };\n        /**\n         * @param {?} pointerType\n         * @param {?} draggableRange\n         * @param {?} event\n         * @param {?} bindMove\n         * @param {?} bindEnd\n         * @param {?=} simulateImmediateMove\n         * @param {?=} simulateImmediateEnd\n         * @return {?}\n         */\n        SliderComponent.prototype.onBarStart = /**\n         * @param {?} pointerType\n         * @param {?} draggableRange\n         * @param {?} event\n         * @param {?} bindMove\n         * @param {?} bindEnd\n         * @param {?=} simulateImmediateMove\n         * @param {?=} simulateImmediateEnd\n         * @return {?}\n         */\n            function (pointerType, draggableRange, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n                if (draggableRange) {\n                    this.onDragStart(pointerType, event, bindMove, bindEnd);\n                }\n                else {\n                    this.onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd);\n                }\n            };\n        /**\n         * @param {?} pointerType\n         * @param {?} event\n         * @param {?} bindMove\n         * @param {?} bindEnd\n         * @param {?=} simulateImmediateMove\n         * @param {?=} simulateImmediateEnd\n         * @return {?}\n         */\n        SliderComponent.prototype.onStart = /**\n         * @param {?} pointerType\n         * @param {?} event\n         * @param {?} bindMove\n         * @param {?} bindEnd\n         * @param {?=} simulateImmediateMove\n         * @param {?=} simulateImmediateEnd\n         * @return {?}\n         */\n            function (pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {\n                var _this = this;\n                event.stopPropagation();\n                // Only call preventDefault() when handling non-passive events (passive events don't need it)\n                if (!CompatibilityHelper.isTouchEvent(event) && !detectPassiveEvents.supportsPassiveEvents) {\n                    event.preventDefault();\n                }\n                this.moving = false;\n                // We have to do this in case the HTML where the sliders are on\n                // have been animated into view.\n                this.calculateViewDimensions();\n                if (ValueHelper.isNullOrUndefined(pointerType)) {\n                    pointerType = this.getNearestHandle(event);\n                }\n                this.currentTrackingPointer = pointerType;\n                /** @type {?} */\n                var pointerElement = this.getPointerElement(pointerType);\n                pointerElement.active = true;\n                if (this.viewOptions.keyboardSupport) {\n                    pointerElement.focus();\n                }\n                if (bindMove) {\n                    this.unsubscribeOnMove();\n                    /** @type {?} */\n                    var onMoveCallback = function (e) { return _this.dragging.active ? _this.onDragMove(e) : _this.onMove(e); };\n                    if (CompatibilityHelper.isTouchEvent(event)) {\n                        this.onMoveEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchmove', onMoveCallback);\n                    }\n                    else {\n                        this.onMoveEventListener = this.eventListenerHelper.attachEventListener(document, 'mousemove', onMoveCallback);\n                    }\n                }\n                if (bindEnd) {\n                    this.unsubscribeOnEnd();\n                    /** @type {?} */\n                    var onEndCallback = function (e) { return _this.onEnd(e); };\n                    if (CompatibilityHelper.isTouchEvent(event)) {\n                        this.onEndEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchend', onEndCallback);\n                    }\n                    else {\n                        this.onEndEventListener = this.eventListenerHelper.attachEventListener(document, 'mouseup', onEndCallback);\n                    }\n                }\n                this.userChangeStart.emit(this.getChangeContext());\n                if (CompatibilityHelper.isTouchEvent(event) && !ValueHelper.isNullOrUndefined(( /** @type {?} */(event)).changedTouches)) {\n                    // Store the touch identifier\n                    if (ValueHelper.isNullOrUndefined(this.touchId)) {\n                        this.touchId = ( /** @type {?} */(event)).changedTouches[0].identifier;\n                    }\n                }\n                // Click events, either with mouse or touch gesture are weird. Sometimes they result in full\n                // start, move, end sequence, and sometimes, they don't - they only invoke mousedown\n                // As a workaround, we simulate the first move event and the end event if it's necessary\n                if (simulateImmediateMove) {\n                    this.onMove(event, true);\n                }\n                if (simulateImmediateEnd) {\n                    this.onEnd(event);\n                }\n            };\n        /**\n         * @param {?} event\n         * @param {?=} fromTick\n         * @return {?}\n         */\n        SliderComponent.prototype.onMove = /**\n         * @param {?} event\n         * @param {?=} fromTick\n         * @return {?}\n         */\n            function (event, fromTick) {\n                /** @type {?} */\n                var touchForThisSlider = null;\n                if (CompatibilityHelper.isTouchEvent(event)) {\n                    /** @type {?} */\n                    var changedTouches = ( /** @type {?} */(event)).changedTouches;\n                    for (var i = 0; i < changedTouches.length; i++) {\n                        if (changedTouches[i].identifier === this.touchId) {\n                            touchForThisSlider = changedTouches[i];\n                            break;\n                        }\n                    }\n                    if (ValueHelper.isNullOrUndefined(touchForThisSlider)) {\n                        return;\n                    }\n                }\n                if (this.viewOptions.animate && !this.viewOptions.animateOnMove) {\n                    if (this.moving) {\n                        this.sliderElementAnimateClass = false;\n                    }\n                }\n                this.moving = true;\n                /** @type {?} */\n                var newPos = !ValueHelper.isNullOrUndefined(touchForThisSlider)\n                    ? this.getEventPosition(event, touchForThisSlider.identifier)\n                    : this.getEventPosition(event);\n                /** @type {?} */\n                var newValue;\n                /** @type {?} */\n                var ceilValue = this.viewOptions.rightToLeft\n                    ? this.viewOptions.floor\n                    : this.viewOptions.ceil;\n                /** @type {?} */\n                var floorValue = this.viewOptions.rightToLeft ? this.viewOptions.ceil : this.viewOptions.floor;\n                if (newPos <= 0) {\n                    newValue = floorValue;\n                }\n                else if (newPos >= this.maxHandlePosition) {\n                    newValue = ceilValue;\n                }\n                else {\n                    newValue = this.positionToValue(newPos);\n                    if (fromTick && !ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) {\n                        newValue = this.roundStep(newValue, this.viewOptions.tickStep);\n                    }\n                    else {\n                        newValue = this.roundStep(newValue);\n                    }\n                }\n                this.positionTrackingHandle(newValue);\n            };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        SliderComponent.prototype.onEnd = /**\n         * @param {?} event\n         * @return {?}\n         */\n            function (event) {\n                if (CompatibilityHelper.isTouchEvent(event)) {\n                    /** @type {?} */\n                    var changedTouches = ( /** @type {?} */(event)).changedTouches;\n                    if (changedTouches[0].identifier !== this.touchId) {\n                        return;\n                    }\n                }\n                this.moving = false;\n                if (this.viewOptions.animate) {\n                    this.sliderElementAnimateClass = true;\n                }\n                this.touchId = null;\n                if (!this.viewOptions.keyboardSupport) {\n                    this.minHandleElement.active = false;\n                    this.maxHandleElement.active = false;\n                    this.currentTrackingPointer = null;\n                }\n                this.dragging.active = false;\n                this.unsubscribeOnMove();\n                this.unsubscribeOnEnd();\n                this.userChangeEnd.emit(this.getChangeContext());\n            };\n        /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n        SliderComponent.prototype.onPointerFocus = /**\n         * @param {?} pointerType\n         * @return {?}\n         */\n            function (pointerType) {\n                var _this = this;\n                /** @type {?} */\n                var pointerElement = this.getPointerElement(pointerType);\n                pointerElement.on('blur', function () { return _this.onPointerBlur(pointerElement); });\n                pointerElement.on('keydown', function (event) { return _this.onKeyboardEvent(event); });\n                pointerElement.on('keyup', function () { return _this.onKeyUp(); });\n                pointerElement.active = true;\n                this.currentTrackingPointer = pointerType;\n                this.currentFocusPointer = pointerType;\n                this.firstKeyDown = true;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.onKeyUp = /**\n         * @return {?}\n         */\n            function () {\n                this.firstKeyDown = true;\n                this.userChangeEnd.emit(this.getChangeContext());\n            };\n        /**\n         * @param {?} pointer\n         * @return {?}\n         */\n        SliderComponent.prototype.onPointerBlur = /**\n         * @param {?} pointer\n         * @return {?}\n         */\n            function (pointer) {\n                pointer.off('blur');\n                pointer.off('keydown');\n                pointer.off('keyup');\n                pointer.active = false;\n                if (ValueHelper.isNullOrUndefined(this.touchId)) {\n                    this.currentTrackingPointer = null;\n                    this.currentFocusPointer = null;\n                }\n            };\n        /**\n         * @param {?} currentValue\n         * @return {?}\n         */\n        SliderComponent.prototype.getKeyActions = /**\n         * @param {?} currentValue\n         * @return {?}\n         */\n            function (currentValue) {\n                /** @type {?} */\n                var valueRange = this.viewOptions.ceil - this.viewOptions.floor;\n                /** @type {?} */\n                var increaseStep = currentValue + this.viewOptions.step;\n                /** @type {?} */\n                var decreaseStep = currentValue - this.viewOptions.step;\n                /** @type {?} */\n                var increasePage = currentValue + valueRange / 10;\n                /** @type {?} */\n                var decreasePage = currentValue - valueRange / 10;\n                if (this.viewOptions.reversedControls) {\n                    increaseStep = currentValue - this.viewOptions.step;\n                    decreaseStep = currentValue + this.viewOptions.step;\n                    increasePage = currentValue - valueRange / 10;\n                    decreasePage = currentValue + valueRange / 10;\n                }\n                /** @type {?} */\n                var actions = {\n                    UP: increaseStep,\n                    DOWN: decreaseStep,\n                    LEFT: decreaseStep,\n                    RIGHT: increaseStep,\n                    PAGEUP: increasePage,\n                    PAGEDOWN: decreasePage,\n                    HOME: this.viewOptions.reversedControls ? this.viewOptions.ceil : this.viewOptions.floor,\n                    END: this.viewOptions.reversedControls ? this.viewOptions.floor : this.viewOptions.ceil,\n                };\n                // right to left means swapping right and left arrows\n                if (this.viewOptions.rightToLeft) {\n                    actions[\"LEFT\"] = increaseStep;\n                    actions[\"RIGHT\"] = decreaseStep;\n                    // right to left and vertical means we also swap up and down\n                    if (this.viewOptions.vertical || this.viewOptions.rotate !== 0) {\n                        actions[\"UP\"] = decreaseStep;\n                        actions[\"DOWN\"] = increaseStep;\n                    }\n                }\n                return actions;\n            };\n        /**\n         * @param {?} event\n         * @return {?}\n         */\n        SliderComponent.prototype.onKeyboardEvent = /**\n         * @param {?} event\n         * @return {?}\n         */\n            function (event) {\n                /** @type {?} */\n                var currentValue = this.getCurrentTrackingValue();\n                /** @type {?} */\n                var keyCode = !ValueHelper.isNullOrUndefined(event.keyCode)\n                    ? event.keyCode\n                    : event.which;\n                /** @type {?} */\n                var keys = {\n                    38: 'UP',\n                    40: 'DOWN',\n                    37: 'LEFT',\n                    39: 'RIGHT',\n                    33: 'PAGEUP',\n                    34: 'PAGEDOWN',\n                    36: 'HOME',\n                    35: 'END',\n                };\n                /** @type {?} */\n                var actions = this.getKeyActions(currentValue);\n                /** @type {?} */\n                var key = keys[keyCode];\n                /** @type {?} */\n                var action = actions[key];\n                if (ValueHelper.isNullOrUndefined(action) || ValueHelper.isNullOrUndefined(this.currentTrackingPointer)) {\n                    return;\n                }\n                event.preventDefault();\n                if (this.firstKeyDown) {\n                    this.firstKeyDown = false;\n                    this.userChangeStart.emit(this.getChangeContext());\n                }\n                /** @type {?} */\n                var actionValue = MathHelper.clampToRange(action, this.viewOptions.floor, this.viewOptions.ceil);\n                /** @type {?} */\n                var newValue = this.roundStep(actionValue);\n                if (!this.viewOptions.draggableRangeOnly) {\n                    this.positionTrackingHandle(newValue);\n                }\n                else {\n                    /** @type {?} */\n                    var difference = this.viewHighValue - this.viewLowValue;\n                    /** @type {?} */\n                    var newMinValue = void 0;\n                    /** @type {?} */\n                    var newMaxValue = void 0;\n                    if (this.currentTrackingPointer === PointerType.Min) {\n                        newMinValue = newValue;\n                        newMaxValue = newValue + difference;\n                        if (newMaxValue > this.viewOptions.ceil) {\n                            newMaxValue = this.viewOptions.ceil;\n                            newMinValue = newMaxValue - difference;\n                        }\n                    }\n                    else if (this.currentTrackingPointer === PointerType.Max) {\n                        newMaxValue = newValue;\n                        newMinValue = newValue - difference;\n                        if (newMinValue < this.viewOptions.floor) {\n                            newMinValue = this.viewOptions.floor;\n                            newMaxValue = newMinValue + difference;\n                        }\n                    }\n                    this.positionTrackingBar(newMinValue, newMaxValue);\n                }\n            };\n        /**\n         * @param {?} pointerType\n         * @param {?} event\n         * @param {?} bindMove\n         * @param {?} bindEnd\n         * @return {?}\n         */\n        SliderComponent.prototype.onDragStart = /**\n         * @param {?} pointerType\n         * @param {?} event\n         * @param {?} bindMove\n         * @param {?} bindEnd\n         * @return {?}\n         */\n            function (pointerType, event, bindMove, bindEnd) {\n                /** @type {?} */\n                var position = this.getEventPosition(event);\n                this.dragging = new Dragging();\n                this.dragging.active = true;\n                this.dragging.value = this.positionToValue(position);\n                this.dragging.difference = this.viewHighValue - this.viewLowValue;\n                this.dragging.lowLimit = this.viewOptions.rightToLeft\n                    ? this.minHandleElement.position - position\n                    : position - this.minHandleElement.position;\n                this.dragging.highLimit = this.viewOptions.rightToLeft\n                    ? position - this.maxHandleElement.position\n                    : this.maxHandleElement.position - position;\n                this.onStart(pointerType, event, bindMove, bindEnd);\n            };\n        /**\n         * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n         * @param {?} newPos\n         * @param {?} outOfBounds\n         * @param {?} isAbove\n         * @return {?}\n         */\n        SliderComponent.prototype.getMinValue = /**\n         * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n         * @param {?} newPos\n         * @param {?} outOfBounds\n         * @param {?} isAbove\n         * @return {?}\n         */\n            function (newPos, outOfBounds, isAbove) {\n                /** @type {?} */\n                var isRTL = this.viewOptions.rightToLeft;\n                /** @type {?} */\n                var value = null;\n                if (outOfBounds) {\n                    if (isAbove) {\n                        value = isRTL\n                            ? this.viewOptions.floor\n                            : this.viewOptions.ceil - this.dragging.difference;\n                    }\n                    else {\n                        value = isRTL\n                            ? this.viewOptions.ceil - this.dragging.difference\n                            : this.viewOptions.floor;\n                    }\n                }\n                else {\n                    value = isRTL\n                        ? this.positionToValue(newPos + this.dragging.lowLimit)\n                        : this.positionToValue(newPos - this.dragging.lowLimit);\n                }\n                return this.roundStep(value);\n            };\n        /**\n         * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n         * @param {?} newPos\n         * @param {?} outOfBounds\n         * @param {?} isAbove\n         * @return {?}\n         */\n        SliderComponent.prototype.getMaxValue = /**\n         * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft\n         * @param {?} newPos\n         * @param {?} outOfBounds\n         * @param {?} isAbove\n         * @return {?}\n         */\n            function (newPos, outOfBounds, isAbove) {\n                /** @type {?} */\n                var isRTL = this.viewOptions.rightToLeft;\n                /** @type {?} */\n                var value = null;\n                if (outOfBounds) {\n                    if (isAbove) {\n                        value = isRTL\n                            ? this.viewOptions.floor + this.dragging.difference\n                            : this.viewOptions.ceil;\n                    }\n                    else {\n                        value = isRTL\n                            ? this.viewOptions.ceil\n                            : this.viewOptions.floor + this.dragging.difference;\n                    }\n                }\n                else {\n                    if (isRTL) {\n                        value =\n                            this.positionToValue(newPos + this.dragging.lowLimit) +\n                                this.dragging.difference;\n                    }\n                    else {\n                        value =\n                            this.positionToValue(newPos - this.dragging.lowLimit) +\n                                this.dragging.difference;\n                    }\n                }\n                return this.roundStep(value);\n            };\n        /**\n         * @param {?=} event\n         * @return {?}\n         */\n        SliderComponent.prototype.onDragMove = /**\n         * @param {?=} event\n         * @return {?}\n         */\n            function (event) {\n                /** @type {?} */\n                var newPos = this.getEventPosition(event);\n                if (this.viewOptions.animate && !this.viewOptions.animateOnMove) {\n                    if (this.moving) {\n                        this.sliderElementAnimateClass = false;\n                    }\n                }\n                this.moving = true;\n                /** @type {?} */\n                var ceilLimit;\n                /** @type {?} */\n                var floorLimit;\n                /** @type {?} */\n                var floorHandleElement;\n                /** @type {?} */\n                var ceilHandleElement;\n                if (this.viewOptions.rightToLeft) {\n                    ceilLimit = this.dragging.lowLimit;\n                    floorLimit = this.dragging.highLimit;\n                    floorHandleElement = this.maxHandleElement;\n                    ceilHandleElement = this.minHandleElement;\n                }\n                else {\n                    ceilLimit = this.dragging.highLimit;\n                    floorLimit = this.dragging.lowLimit;\n                    floorHandleElement = this.minHandleElement;\n                    ceilHandleElement = this.maxHandleElement;\n                }\n                /** @type {?} */\n                var isUnderFloorLimit = (newPos <= floorLimit);\n                /** @type {?} */\n                var isOverCeilLimit = (newPos >= this.maxHandlePosition - ceilLimit);\n                /** @type {?} */\n                var newMinValue;\n                /** @type {?} */\n                var newMaxValue;\n                if (isUnderFloorLimit) {\n                    if (floorHandleElement.position === 0) {\n                        return;\n                    }\n                    newMinValue = this.getMinValue(newPos, true, false);\n                    newMaxValue = this.getMaxValue(newPos, true, false);\n                }\n                else if (isOverCeilLimit) {\n                    if (ceilHandleElement.position === this.maxHandlePosition) {\n                        return;\n                    }\n                    newMaxValue = this.getMaxValue(newPos, true, true);\n                    newMinValue = this.getMinValue(newPos, true, true);\n                }\n                else {\n                    newMinValue = this.getMinValue(newPos, false, false);\n                    newMaxValue = this.getMaxValue(newPos, false, false);\n                }\n                this.positionTrackingBar(newMinValue, newMaxValue);\n            };\n        /**\n         * @param {?} newMinValue\n         * @param {?} newMaxValue\n         * @return {?}\n         */\n        SliderComponent.prototype.positionTrackingBar = /**\n         * @param {?} newMinValue\n         * @param {?} newMaxValue\n         * @return {?}\n         */\n            function (newMinValue, newMaxValue) {\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) &&\n                    newMinValue < this.viewOptions.minLimit) {\n                    newMinValue = this.viewOptions.minLimit;\n                    newMaxValue = MathHelper.roundToPrecisionLimit(newMinValue + this.dragging.difference, this.viewOptions.precisionLimit);\n                }\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) &&\n                    newMaxValue > this.viewOptions.maxLimit) {\n                    newMaxValue = this.viewOptions.maxLimit;\n                    newMinValue = MathHelper.roundToPrecisionLimit(newMaxValue - this.dragging.difference, this.viewOptions.precisionLimit);\n                }\n                this.viewLowValue = newMinValue;\n                this.viewHighValue = newMaxValue;\n                this.applyViewChange();\n                this.updateHandles(PointerType.Min, this.valueToPosition(newMinValue));\n                this.updateHandles(PointerType.Max, this.valueToPosition(newMaxValue));\n            };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        SliderComponent.prototype.positionTrackingHandle = /**\n         * @param {?} newValue\n         * @return {?}\n         */\n            function (newValue) {\n                newValue = this.applyMinMaxLimit(newValue);\n                if (this.range) {\n                    if (this.viewOptions.pushRange) {\n                        newValue = this.applyPushRange(newValue);\n                    }\n                    else {\n                        if (this.viewOptions.noSwitching) {\n                            if (this.currentTrackingPointer === PointerType.Min &&\n                                newValue > this.viewHighValue) {\n                                newValue = this.applyMinMaxRange(this.viewHighValue);\n                            }\n                            else if (this.currentTrackingPointer === PointerType.Max &&\n                                newValue < this.viewLowValue) {\n                                newValue = this.applyMinMaxRange(this.viewLowValue);\n                            }\n                        }\n                        newValue = this.applyMinMaxRange(newValue);\n                        /* This is to check if we need to switch the min and max handles */\n                        if (this.currentTrackingPointer === PointerType.Min && newValue > this.viewHighValue) {\n                            this.viewLowValue = this.viewHighValue;\n                            this.applyViewChange();\n                            this.updateHandles(PointerType.Min, this.maxHandleElement.position);\n                            this.updateAriaAttributes();\n                            this.currentTrackingPointer = PointerType.Max;\n                            this.minHandleElement.active = false;\n                            this.maxHandleElement.active = true;\n                            if (this.viewOptions.keyboardSupport) {\n                                this.maxHandleElement.focus();\n                            }\n                        }\n                        else if (this.currentTrackingPointer === PointerType.Max &&\n                            newValue < this.viewLowValue) {\n                            this.viewHighValue = this.viewLowValue;\n                            this.applyViewChange();\n                            this.updateHandles(PointerType.Max, this.minHandleElement.position);\n                            this.updateAriaAttributes();\n                            this.currentTrackingPointer = PointerType.Min;\n                            this.maxHandleElement.active = false;\n                            this.minHandleElement.active = true;\n                            if (this.viewOptions.keyboardSupport) {\n                                this.minHandleElement.focus();\n                            }\n                        }\n                    }\n                }\n                if (this.getCurrentTrackingValue() !== newValue) {\n                    if (this.currentTrackingPointer === PointerType.Min) {\n                        this.viewLowValue = newValue;\n                        this.applyViewChange();\n                    }\n                    else if (this.currentTrackingPointer === PointerType.Max) {\n                        this.viewHighValue = newValue;\n                        this.applyViewChange();\n                    }\n                    this.updateHandles(this.currentTrackingPointer, this.valueToPosition(newValue));\n                    this.updateAriaAttributes();\n                }\n            };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        SliderComponent.prototype.applyMinMaxLimit = /**\n         * @param {?} newValue\n         * @return {?}\n         */\n            function (newValue) {\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) && newValue < this.viewOptions.minLimit) {\n                    return this.viewOptions.minLimit;\n                }\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) && newValue > this.viewOptions.maxLimit) {\n                    return this.viewOptions.maxLimit;\n                }\n                return newValue;\n            };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        SliderComponent.prototype.applyMinMaxRange = /**\n         * @param {?} newValue\n         * @return {?}\n         */\n            function (newValue) {\n                /** @type {?} */\n                var oppositeValue = (this.currentTrackingPointer === PointerType.Min)\n                    ? this.viewHighValue\n                    : this.viewLowValue;\n                /** @type {?} */\n                var difference = Math.abs(newValue - oppositeValue);\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange)) {\n                    if (difference < this.viewOptions.minRange) {\n                        if (this.currentTrackingPointer === PointerType.Min) {\n                            return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.minRange, this.viewOptions.precisionLimit);\n                        }\n                        else if (this.currentTrackingPointer === PointerType.Max) {\n                            return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.minRange, this.viewOptions.precisionLimit);\n                        }\n                    }\n                }\n                if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxRange)) {\n                    if (difference > this.viewOptions.maxRange) {\n                        if (this.currentTrackingPointer === PointerType.Min) {\n                            return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n                        }\n                        else if (this.currentTrackingPointer === PointerType.Max) {\n                            return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n                        }\n                    }\n                }\n                return newValue;\n            };\n        /**\n         * @param {?} newValue\n         * @return {?}\n         */\n        SliderComponent.prototype.applyPushRange = /**\n         * @param {?} newValue\n         * @return {?}\n         */\n            function (newValue) {\n                /** @type {?} */\n                var difference = (this.currentTrackingPointer === PointerType.Min)\n                    ? this.viewHighValue - newValue\n                    : newValue - this.viewLowValue;\n                /** @type {?} */\n                var minRange = (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange))\n                    ? this.viewOptions.minRange\n                    : this.viewOptions.step;\n                /** @type {?} */\n                var maxRange = this.viewOptions.maxRange;\n                // if smaller than minRange\n                if (difference < minRange) {\n                    if (this.currentTrackingPointer === PointerType.Min) {\n                        this.viewHighValue = MathHelper.roundToPrecisionLimit(Math.min(newValue + minRange, this.viewOptions.ceil), this.viewOptions.precisionLimit);\n                        newValue = MathHelper.roundToPrecisionLimit(this.viewHighValue - minRange, this.viewOptions.precisionLimit);\n                        this.applyViewChange();\n                        this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n                    }\n                    else if (this.currentTrackingPointer === PointerType.Max) {\n                        this.viewLowValue = MathHelper.roundToPrecisionLimit(Math.max(newValue - minRange, this.viewOptions.floor), this.viewOptions.precisionLimit);\n                        newValue = MathHelper.roundToPrecisionLimit(this.viewLowValue + minRange, this.viewOptions.precisionLimit);\n                        this.applyViewChange();\n                        this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n                    }\n                    this.updateAriaAttributes();\n                }\n                else if (!ValueHelper.isNullOrUndefined(maxRange) && difference > maxRange) {\n                    // if greater than maxRange\n                    if (this.currentTrackingPointer === PointerType.Min) {\n                        this.viewHighValue = MathHelper.roundToPrecisionLimit(newValue + maxRange, this.viewOptions.precisionLimit);\n                        this.applyViewChange();\n                        this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n                    }\n                    else if (this.currentTrackingPointer === PointerType.Max) {\n                        this.viewLowValue = MathHelper.roundToPrecisionLimit(newValue - maxRange, this.viewOptions.precisionLimit);\n                        this.applyViewChange();\n                        this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n                    }\n                    this.updateAriaAttributes();\n                }\n                return newValue;\n            };\n        /**\n         * @return {?}\n         */\n        SliderComponent.prototype.getChangeContext = /**\n         * @return {?}\n         */\n            function () {\n                /** @type {?} */\n                var changeContext = new ChangeContext();\n                changeContext.pointerType = this.currentTrackingPointer;\n                changeContext.value = +this.value;\n                if (this.range) {\n                    changeContext.highValue = +this.highValue;\n                }\n                return changeContext;\n            };\n        SliderComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'ngx-slider',\n                        template: \"<!-- // 0 Left selection bar outside two handles -->\\n<span ngxSliderElement #leftOuterSelectionBar class=\\\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-left-out-selection\\\">\\n  <span class=\\\"ngx-slider-span ngx-slider-bar\\\"></span>\\n</span>\\n<!-- // 1 Right selection bar outside two handles -->\\n<span ngxSliderElement #rightOuterSelectionBar class=\\\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-right-out-selection\\\">\\n  <span class=\\\"ngx-slider-span ngx-slider-bar\\\"></span>\\n</span>\\n<!-- // 2 The whole slider bar -->\\n<span ngxSliderElement #fullBar [class.ngx-slider-transparent]=\\\"fullBarTransparentClass\\\" class=\\\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-full-bar\\\">\\n  <span class=\\\"ngx-slider-span ngx-slider-bar\\\"></span>\\n</span>\\n<!-- // 3 Selection bar between two handles -->\\n<span ngxSliderElement #selectionBar [class.ngx-slider-draggable]=\\\"selectionBarDraggableClass\\\" class=\\\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-selection-bar\\\">\\n  <span class=\\\"ngx-slider-span ngx-slider-bar ngx-slider-selection\\\" [ngStyle]=\\\"barStyle\\\"></span>\\n</span>\\n<!-- // 4 Low slider handle -->\\n<span ngxSliderHandle #minHandle class=\\\"ngx-slider-span ngx-slider-pointer ngx-slider-pointer-min\\\" [ngStyle]=minPointerStyle></span>\\n<!-- // 5 High slider handle -->\\n<span ngxSliderHandle #maxHandle [style.display]=\\\"range ? 'inherit' : 'none'\\\" class=\\\"ngx-slider-span ngx-slider-pointer ngx-slider-pointer-max\\\" [ngStyle]=maxPointerStyle></span>\\n<!-- // 6 Floor label -->\\n<span ngxSliderLabel #floorLabel class=\\\"ngx-slider-span ngx-slider-bubble ngx-slider-limit ngx-slider-floor\\\"></span>\\n<!-- // 7 Ceiling label -->\\n<span ngxSliderLabel #ceilLabel class=\\\"ngx-slider-span ngx-slider-bubble ngx-slider-limit ngx-slider-ceil\\\"></span>\\n<!-- // 8 Label above the low slider handle -->\\n<span ngxSliderLabel #minHandleLabel class=\\\"ngx-slider-span ngx-slider-bubble ngx-slider-model-value\\\"></span>\\n<!-- // 9 Label above the high slider handle -->\\n<span ngxSliderLabel #maxHandleLabel class=\\\"ngx-slider-span ngx-slider-bubble ngx-slider-model-high\\\"></span>\\n<!-- // 10 Combined range label when the slider handles are close ex. 15 - 17 -->\\n<span ngxSliderLabel #combinedLabel class=\\\"ngx-slider-span ngx-slider-bubble ngx-slider-combined\\\"></span>\\n<!-- // 11 The ticks -->\\n<span ngxSliderElement #ticksElement [hidden]=\\\"!showTicks\\\" [class.ngx-slider-ticks-values-under]=\\\"ticksUnderValuesClass\\\" class=\\\"ngx-slider-ticks\\\">\\n  <span *ngFor=\\\"let t of ticks\\\" class=\\\"ngx-slider-tick\\\" [ngClass]=\\\"{'ngx-slider-selected': t.selected}\\\" [ngStyle]=\\\"t.style\\\">\\n    <ngx-slider-tooltip-wrapper [template]=\\\"tooltipTemplate\\\" [tooltip]=\\\"t.tooltip\\\" [placement]=\\\"t.tooltipPlacement\\\"></ngx-slider-tooltip-wrapper>\\n    <ngx-slider-tooltip-wrapper *ngIf=\\\"t.value != null\\\" class=\\\"ngx-slider-span ngx-slider-tick-value\\\"\\n        [template]=\\\"tooltipTemplate\\\" [tooltip]=\\\"t.valueTooltip\\\" [placement]=\\\"t.valueTooltipPlacement\\\" [content]=\\\"t.value\\\"></ngx-slider-tooltip-wrapper>\\n    <span *ngIf=\\\"t.legend != null\\\" class=\\\"ngx-slider-span ngx-slider-tick-legend\\\" [innerHTML]=\\\"t.legend\\\"></span>\\n  </span>\\n</span>\",\n                        styles: [\"::ng-deep .ngx-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;touch-action:pan-y}::ng-deep .ngx-slider.with-legend{margin-bottom:40px}::ng-deep .ngx-slider[disabled]{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}::ng-deep .ngx-slider[disabled] .ngx-slider-draggable{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-selection{background:#8b91a2}::ng-deep .ngx-slider[disabled] .ngx-slider-tick{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-tick.ngx-slider-selected{background:#8b91a2}::ng-deep .ngx-slider .ngx-slider-span{white-space:nowrap;position:absolute;display:inline-block}::ng-deep .ngx-slider .ngx-slider-base{width:100%;height:100%;padding:0}::ng-deep .ngx-slider .ngx-slider-bar-wrapper{left:0;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}::ng-deep .ngx-slider .ngx-slider-draggable{cursor:move}::ng-deep .ngx-slider .ngx-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-transparent .ngx-slider-bar{background:0 0}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-left-out-selection .ngx-slider-bar{background:#df002d}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-right-out-selection .ngx-slider-bar{background:#03a688}::ng-deep .ngx-slider .ngx-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}::ng-deep .ngx-slider .ngx-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}::ng-deep .ngx-slider .ngx-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}::ng-deep .ngx-slider .ngx-slider-pointer:hover:after{background-color:#fff}::ng-deep .ngx-slider .ngx-slider-pointer.ngx-slider-active{z-index:4}::ng-deep .ngx-slider .ngx-slider-pointer.ngx-slider-active:after{background-color:#451aff}::ng-deep .ngx-slider .ngx-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d;font-size:16px}::ng-deep .ngx-slider .ngx-slider-bubble.ngx-slider-limit{color:#55637d}::ng-deep .ngx-slider .ngx-slider-ticks{box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}::ng-deep .ngx-slider .ngx-slider-ticks-values-under .ngx-slider-tick-value{top:auto;bottom:-36px}::ng-deep .ngx-slider .ngx-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}::ng-deep .ngx-slider .ngx-slider-tick.ngx-slider-selected{background:#0db9f0}::ng-deep .ngx-slider .ngx-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}::ng-deep .ngx-slider .ngx-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}::ng-deep .ngx-slider.vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline;touch-action:pan-x}::ng-deep .ngx-slider.vertical .ngx-slider-base{width:100%;height:100%;padding:0}::ng-deep .ngx-slider.vertical .ngx-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}::ng-deep .ngx-slider.vertical .ngx-slider-bar{bottom:0;left:auto;width:4px;height:100%}::ng-deep .ngx-slider.vertical .ngx-slider-pointer{left:-14px!important;top:auto;bottom:0}::ng-deep .ngx-slider.vertical .ngx-slider-bubble{left:16px!important;bottom:0}::ng-deep .ngx-slider.vertical .ngx-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}::ng-deep .ngx-slider.vertical .ngx-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}::ng-deep .ngx-slider.vertical .ngx-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}::ng-deep .ngx-slider.vertical .ngx-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}::ng-deep .ngx-slider.vertical .ngx-slider-ticks-values-under .ngx-slider-tick-value{bottom:auto;left:auto;right:24px}::ng-deep .ngx-slider *{transition:none}::ng-deep .ngx-slider.animate .ngx-slider-bar-wrapper{transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-selection{transition:background-color .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-pointer{transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-pointer:after{transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble{transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble.ngx-slider-limit{transition:opacity .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble.ngx-slider-combined{transition:opacity .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-tick{transition:background-color .3s linear}\"],\n                        host: { class: 'ngx-slider' },\n                        providers: [NGX_SLIDER_CONTROL_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SliderComponent.ctorParameters = function () {\n            return [\n                { type: core.Renderer2 },\n                { type: core.ElementRef },\n                { type: core.ChangeDetectorRef },\n                { type: core.NgZone }\n            ];\n        };\n        SliderComponent.propDecorators = {\n            value: [{ type: core.Input }],\n            valueChange: [{ type: core.Output }],\n            highValue: [{ type: core.Input }],\n            highValueChange: [{ type: core.Output }],\n            options: [{ type: core.Input }],\n            userChangeStart: [{ type: core.Output }],\n            userChange: [{ type: core.Output }],\n            userChangeEnd: [{ type: core.Output }],\n            manualRefresh: [{ type: core.Input }],\n            triggerFocus: [{ type: core.Input }],\n            leftOuterSelectionBarElement: [{ type: core.ViewChild, args: ['leftOuterSelectionBar', { read: SliderElementDirective },] }],\n            rightOuterSelectionBarElement: [{ type: core.ViewChild, args: ['rightOuterSelectionBar', { read: SliderElementDirective },] }],\n            fullBarElement: [{ type: core.ViewChild, args: ['fullBar', { read: SliderElementDirective },] }],\n            selectionBarElement: [{ type: core.ViewChild, args: ['selectionBar', { read: SliderElementDirective },] }],\n            minHandleElement: [{ type: core.ViewChild, args: ['minHandle', { read: SliderHandleDirective },] }],\n            maxHandleElement: [{ type: core.ViewChild, args: ['maxHandle', { read: SliderHandleDirective },] }],\n            floorLabelElement: [{ type: core.ViewChild, args: ['floorLabel', { read: SliderLabelDirective },] }],\n            ceilLabelElement: [{ type: core.ViewChild, args: ['ceilLabel', { read: SliderLabelDirective },] }],\n            minHandleLabelElement: [{ type: core.ViewChild, args: ['minHandleLabel', { read: SliderLabelDirective },] }],\n            maxHandleLabelElement: [{ type: core.ViewChild, args: ['maxHandleLabel', { read: SliderLabelDirective },] }],\n            combinedLabelElement: [{ type: core.ViewChild, args: ['combinedLabel', { read: SliderLabelDirective },] }],\n            ticksElement: [{ type: core.ViewChild, args: ['ticksElement', { read: SliderElementDirective },] }],\n            tooltipTemplate: [{ type: core.ContentChild, args: ['tooltipTemplate',] }],\n            sliderElementVerticalClass: [{ type: core.HostBinding, args: ['class.vertical',] }],\n            sliderElementAnimateClass: [{ type: core.HostBinding, args: ['class.animate',] }],\n            sliderElementWithLegendClass: [{ type: core.HostBinding, args: ['class.with-legend',] }],\n            sliderElementDisabledAttr: [{ type: core.HostBinding, args: ['attr.disabled',] }],\n            sliderElementAriaLabel: [{ type: core.HostBinding, args: ['attr.aria-label',] }],\n            onResize: [{ type: core.HostListener, args: ['window:resize', ['$event'],] }]\n        };\n        return SliderComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    var TooltipWrapperComponent = /** @class */ (function () {\n        function TooltipWrapperComponent() {\n        }\n        TooltipWrapperComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'ngx-slider-tooltip-wrapper',\n                        template: \"<ng-container *ngIf=\\\"template\\\">\\n  <ng-template *ngTemplateOutlet=\\\"template; context: {tooltip: tooltip, placement: placement, content: content}\\\"></ng-template>\\n</ng-container>\\n\\n<ng-container *ngIf=\\\"!template\\\">\\n  <div class=\\\"ngx-slider-inner-tooltip\\\" [attr.title]=\\\"tooltip\\\" [attr.data-tooltip-placement]=\\\"placement\\\">\\n    {{content}}\\n  </div>\\n</ng-container>\",\n                        styles: [\".ngx-slider-inner-tooltip{height:100%}\"]\n                    },] },\n        ];\n        TooltipWrapperComponent.propDecorators = {\n            template: [{ type: core.Input }],\n            tooltip: [{ type: core.Input }],\n            placement: [{ type: core.Input }],\n            content: [{ type: core.Input }]\n        };\n        return TooltipWrapperComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n    /**\n     * NgxSlider module\n     *\n     * The module exports the slider component\n     */\n    var NgxSliderModule = /** @class */ (function () {\n        function NgxSliderModule() {\n        }\n        NgxSliderModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            common.CommonModule\n                        ],\n                        declarations: [\n                            SliderComponent,\n                            SliderElementDirective,\n                            SliderHandleDirective,\n                            SliderLabelDirective,\n                            TooltipWrapperComponent\n                        ],\n                        exports: [\n                            SliderComponent\n                        ]\n                    },] },\n        ];\n        return NgxSliderModule;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n     */\n\n    exports.NgxSliderModule = NgxSliderModule;\n    exports.ChangeContext = ChangeContext;\n    exports.PointerType = PointerType;\n    exports.LabelType = LabelType;\n    exports.Options = Options;\n    exports.ɵb = SliderElementDirective;\n    exports.ɵc = SliderHandleDirective;\n    exports.ɵd = SliderLabelDirective;\n    exports.ɵa = SliderComponent;\n    exports.ɵe = TooltipWrapperComponent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"AAAA;AACA,+HAA2E;AAC3E,yHAAuF;AACvF,6CAAa;AACb,iCAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAgE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAKU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAKU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ccASU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAOU;AACV;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;oBAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAiBU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}